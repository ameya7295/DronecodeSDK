// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geofence/geofence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geofence_2fgeofence_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geofence_2fgeofence_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geofence_2fgeofence_2eproto;
namespace mavsdk {
namespace rpc {
namespace geofence {
class GeofenceResult;
class GeofenceResultDefaultTypeInternal;
extern GeofenceResultDefaultTypeInternal _GeofenceResult_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class UploadGeofenceRequest;
class UploadGeofenceRequestDefaultTypeInternal;
extern UploadGeofenceRequestDefaultTypeInternal _UploadGeofenceRequest_default_instance_;
class UploadGeofenceResponse;
class UploadGeofenceResponseDefaultTypeInternal;
extern UploadGeofenceResponseDefaultTypeInternal _UploadGeofenceResponse_default_instance_;
}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::geofence::GeofenceResult* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::GeofenceResult>(Arena*);
template<> ::mavsdk::rpc::geofence::Point* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::Point>(Arena*);
template<> ::mavsdk::rpc::geofence::Polygon* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::Polygon>(Arena*);
template<> ::mavsdk::rpc::geofence::UploadGeofenceRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::UploadGeofenceRequest>(Arena*);
template<> ::mavsdk::rpc::geofence::UploadGeofenceResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::geofence::UploadGeofenceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace geofence {

enum Polygon_Type : int {
  Polygon_Type_INCLUSION = 0,
  Polygon_Type_EXCLUSION = 1,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Polygon_Type_IsValid(int value);
constexpr Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_INCLUSION;
constexpr Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_EXCLUSION;
constexpr int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polygon_Type_descriptor();
template<typename T>
inline const std::string& Polygon_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Polygon_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Polygon_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Polygon_Type_descriptor(), enum_t_value);
}
inline bool Polygon_Type_Parse(
    const std::string& name, Polygon_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
enum GeofenceResult_Result : int {
  GeofenceResult_Result_UNKNOWN = 0,
  GeofenceResult_Result_SUCCESS = 1,
  GeofenceResult_Result_ERROR = 2,
  GeofenceResult_Result_TOO_MANY_GEOFENCE_ITEMS = 3,
  GeofenceResult_Result_BUSY = 4,
  GeofenceResult_Result_TIMEOUT = 5,
  GeofenceResult_Result_INVALID_ARGUMENT = 6,
  GeofenceResult_Result_GeofenceResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeofenceResult_Result_GeofenceResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeofenceResult_Result_IsValid(int value);
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MIN = GeofenceResult_Result_UNKNOWN;
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MAX = GeofenceResult_Result_INVALID_ARGUMENT;
constexpr int GeofenceResult_Result_Result_ARRAYSIZE = GeofenceResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeofenceResult_Result_descriptor();
template<typename T>
inline const std::string& GeofenceResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeofenceResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeofenceResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeofenceResult_Result_descriptor(), enum_t_value);
}
inline bool GeofenceResult_Result_Parse(
    const std::string& name, GeofenceResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeofenceResult_Result>(
    GeofenceResult_Result_descriptor(), name, value);
}
// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geofence_2fgeofence_2eproto);
    return ::descriptor_table_geofence_2fgeofence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_deg_;
  double longitude_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geofence_2fgeofence_2eproto);
    return ::descriptor_table_geofence_2fgeofence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static constexpr Type INCLUSION =
    Polygon_Type_INCLUSION;
  static constexpr Type EXCLUSION =
    Polygon_Type_EXCLUSION;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Polygon_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Polygon_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Polygon_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.geofence.Point points = 1;
  int points_size() const;
  void clear_points();
  ::mavsdk::rpc::geofence::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >*
      mutable_points();
  const ::mavsdk::rpc::geofence::Point& points(int index) const;
  ::mavsdk::rpc::geofence::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >&
      points() const;

  // .mavsdk.rpc.geofence.Polygon.Type type = 2;
  void clear_type();
  ::mavsdk::rpc::geofence::Polygon_Type type() const;
  void set_type(::mavsdk::rpc::geofence::Polygon_Type value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point > points_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceRequest) */ {
 public:
  UploadGeofenceRequest();
  virtual ~UploadGeofenceRequest();

  UploadGeofenceRequest(const UploadGeofenceRequest& from);
  UploadGeofenceRequest(UploadGeofenceRequest&& from) noexcept
    : UploadGeofenceRequest() {
    *this = ::std::move(from);
  }

  inline UploadGeofenceRequest& operator=(const UploadGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceRequest& operator=(UploadGeofenceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadGeofenceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceRequest*>(
               &_UploadGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadGeofenceRequest& a, UploadGeofenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGeofenceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGeofenceRequest* New() const final {
    return CreateMaybeMessage<UploadGeofenceRequest>(nullptr);
  }

  UploadGeofenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGeofenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadGeofenceRequest& from);
  void MergeFrom(const UploadGeofenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGeofenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.UploadGeofenceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geofence_2fgeofence_2eproto);
    return ::descriptor_table_geofence_2fgeofence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
  int polygons_size() const;
  void clear_polygons();
  ::mavsdk::rpc::geofence::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >*
      mutable_polygons();
  const ::mavsdk::rpc::geofence::Polygon& polygons(int index) const;
  ::mavsdk::rpc::geofence::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon > polygons_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceResponse) */ {
 public:
  UploadGeofenceResponse();
  virtual ~UploadGeofenceResponse();

  UploadGeofenceResponse(const UploadGeofenceResponse& from);
  UploadGeofenceResponse(UploadGeofenceResponse&& from) noexcept
    : UploadGeofenceResponse() {
    *this = ::std::move(from);
  }

  inline UploadGeofenceResponse& operator=(const UploadGeofenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceResponse& operator=(UploadGeofenceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadGeofenceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadGeofenceResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceResponse*>(
               &_UploadGeofenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadGeofenceResponse& a, UploadGeofenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGeofenceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGeofenceResponse* New() const final {
    return CreateMaybeMessage<UploadGeofenceResponse>(nullptr);
  }

  UploadGeofenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGeofenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadGeofenceResponse& from);
  void MergeFrom(const UploadGeofenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGeofenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.UploadGeofenceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geofence_2fgeofence_2eproto);
    return ::descriptor_table_geofence_2fgeofence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeofenceResultFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
  bool has_geofence_result() const;
  private:
  bool _internal_has_geofence_result() const;
  public:
  void clear_geofence_result();
  const ::mavsdk::rpc::geofence::GeofenceResult& geofence_result() const;
  ::mavsdk::rpc::geofence::GeofenceResult* release_geofence_result();
  ::mavsdk::rpc::geofence::GeofenceResult* mutable_geofence_result();
  void set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::geofence::GeofenceResult* geofence_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class GeofenceResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.GeofenceResult) */ {
 public:
  GeofenceResult();
  virtual ~GeofenceResult();

  GeofenceResult(const GeofenceResult& from);
  GeofenceResult(GeofenceResult&& from) noexcept
    : GeofenceResult() {
    *this = ::std::move(from);
  }

  inline GeofenceResult& operator=(const GeofenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeofenceResult& operator=(GeofenceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeofenceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeofenceResult* internal_default_instance() {
    return reinterpret_cast<const GeofenceResult*>(
               &_GeofenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeofenceResult& a, GeofenceResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GeofenceResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeofenceResult* New() const final {
    return CreateMaybeMessage<GeofenceResult>(nullptr);
  }

  GeofenceResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeofenceResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeofenceResult& from);
  void MergeFrom(const GeofenceResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeofenceResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.geofence.GeofenceResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geofence_2fgeofence_2eproto);
    return ::descriptor_table_geofence_2fgeofence_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeofenceResult_Result Result;
  static constexpr Result UNKNOWN =
    GeofenceResult_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    GeofenceResult_Result_SUCCESS;
  static constexpr Result ERROR =
    GeofenceResult_Result_ERROR;
  static constexpr Result TOO_MANY_GEOFENCE_ITEMS =
    GeofenceResult_Result_TOO_MANY_GEOFENCE_ITEMS;
  static constexpr Result BUSY =
    GeofenceResult_Result_BUSY;
  static constexpr Result TIMEOUT =
    GeofenceResult_Result_TIMEOUT;
  static constexpr Result INVALID_ARGUMENT =
    GeofenceResult_Result_INVALID_ARGUMENT;
  static inline bool Result_IsValid(int value) {
    return GeofenceResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GeofenceResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GeofenceResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GeofenceResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GeofenceResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GeofenceResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return GeofenceResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::geofence::GeofenceResult_Result result() const;
  void set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.GeofenceResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double latitude_deg = 1;
inline void Point::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Point::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.latitude_deg)
  return latitude_deg_;
}
inline void Point::set_latitude_deg(double value) {
  
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.latitude_deg)
}

// double longitude_deg = 2;
inline void Point::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Point::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.longitude_deg)
  return longitude_deg_;
}
inline void Point::set_longitude_deg(double value) {
  
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.longitude_deg)
}

// -------------------------------------------------------------------

// Polygon

// repeated .mavsdk.rpc.geofence.Point points = 1;
inline int Polygon::points_size() const {
  return points_.size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline ::mavsdk::rpc::geofence::Point* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.Polygon.points)
  return &points_;
}
inline const ::mavsdk::rpc::geofence::Point& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.points)
  return points_.Get(index);
}
inline ::mavsdk::rpc::geofence::Point* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.Polygon.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Point >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.Polygon.points)
  return points_;
}

// .mavsdk.rpc.geofence.Polygon.Type type = 2;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::mavsdk::rpc::geofence::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.type)
  return static_cast< ::mavsdk::rpc::geofence::Polygon_Type >(type_);
}
inline void Polygon::set_type(::mavsdk::rpc::geofence::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Polygon.type)
}

// -------------------------------------------------------------------

// UploadGeofenceRequest

// repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
inline int UploadGeofenceRequest::polygons_size() const {
  return polygons_.size();
}
inline void UploadGeofenceRequest::clear_polygons() {
  polygons_.Clear();
}
inline ::mavsdk::rpc::geofence::Polygon* UploadGeofenceRequest::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >*
UploadGeofenceRequest::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return &polygons_;
}
inline const ::mavsdk::rpc::geofence::Polygon& UploadGeofenceRequest::polygons(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_.Get(index);
}
inline ::mavsdk::rpc::geofence::Polygon* UploadGeofenceRequest::add_polygons() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon >&
UploadGeofenceRequest::polygons() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.UploadGeofenceRequest.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// UploadGeofenceResponse

// .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
inline bool UploadGeofenceResponse::has_geofence_result() const {
  return this != internal_default_instance() && geofence_result_ != nullptr;
}
inline void UploadGeofenceResponse::clear_geofence_result() {
  if (GetArenaNoVirtual() == nullptr && geofence_result_ != nullptr) {
    delete geofence_result_;
  }
  geofence_result_ = nullptr;
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& UploadGeofenceResponse::geofence_result() const {
  const ::mavsdk::rpc::geofence::GeofenceResult* p = geofence_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceResult*>(
      &::mavsdk::rpc::geofence::_GeofenceResult_default_instance_);
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::release_geofence_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  
  ::mavsdk::rpc::geofence::GeofenceResult* temp = geofence_result_;
  geofence_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::mutable_geofence_result() {
  
  if (geofence_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::geofence::GeofenceResult>(GetArenaNoVirtual());
    geofence_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return geofence_result_;
}
inline void UploadGeofenceResponse::set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* geofence_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geofence_result_;
  }
  if (geofence_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geofence_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geofence_result, submessage_arena);
    }
    
  } else {
    
  }
  geofence_result_ = geofence_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
}

// -------------------------------------------------------------------

// GeofenceResult

// .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
inline void GeofenceResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::geofence::GeofenceResult_Result GeofenceResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result)
  return static_cast< ::mavsdk::rpc::geofence::GeofenceResult_Result >(result_);
}
inline void GeofenceResult::set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result)
}

// string result_str = 2;
inline void GeofenceResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeofenceResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _internal_result_str();
}
inline void GeofenceResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline std::string* GeofenceResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& GeofenceResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void GeofenceResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeofenceResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline void GeofenceResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline void GeofenceResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline std::string* GeofenceResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeofenceResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.GeofenceResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeofenceResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.GeofenceResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::geofence::Polygon_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::geofence::Polygon_Type>() {
  return ::mavsdk::rpc::geofence::Polygon_Type_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::geofence::GeofenceResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::geofence::GeofenceResult_Result>() {
  return ::mavsdk::rpc::geofence::GeofenceResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geofence_2fgeofence_2eproto
