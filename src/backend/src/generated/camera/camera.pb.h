// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera/camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_2fcamera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[41]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_2fcamera_2eproto;
namespace mavsdk {
namespace rpc {
namespace camera {
class CameraResult;
class CameraResultDefaultTypeInternal;
extern CameraResultDefaultTypeInternal _CameraResult_default_instance_;
class CameraStatus;
class CameraStatusDefaultTypeInternal;
extern CameraStatusDefaultTypeInternal _CameraStatus_default_instance_;
class CameraStatusResponse;
class CameraStatusResponseDefaultTypeInternal;
extern CameraStatusResponseDefaultTypeInternal _CameraStatusResponse_default_instance_;
class CaptureInfo;
class CaptureInfoDefaultTypeInternal;
extern CaptureInfoDefaultTypeInternal _CaptureInfo_default_instance_;
class CaptureInfoResponse;
class CaptureInfoResponseDefaultTypeInternal;
extern CaptureInfoResponseDefaultTypeInternal _CaptureInfoResponse_default_instance_;
class CurrentSettingsResponse;
class CurrentSettingsResponseDefaultTypeInternal;
extern CurrentSettingsResponseDefaultTypeInternal _CurrentSettingsResponse_default_instance_;
class EulerAngle;
class EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class ModeResponse;
class ModeResponseDefaultTypeInternal;
extern ModeResponseDefaultTypeInternal _ModeResponse_default_instance_;
class Option;
class OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PossibleSettingOptionsResponse;
class PossibleSettingOptionsResponseDefaultTypeInternal;
extern PossibleSettingOptionsResponseDefaultTypeInternal _PossibleSettingOptionsResponse_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class SetModeRequest;
class SetModeRequestDefaultTypeInternal;
extern SetModeRequestDefaultTypeInternal _SetModeRequest_default_instance_;
class SetModeResponse;
class SetModeResponseDefaultTypeInternal;
extern SetModeResponseDefaultTypeInternal _SetModeResponse_default_instance_;
class SetSettingRequest;
class SetSettingRequestDefaultTypeInternal;
extern SetSettingRequestDefaultTypeInternal _SetSettingRequest_default_instance_;
class SetSettingResponse;
class SetSettingResponseDefaultTypeInternal;
extern SetSettingResponseDefaultTypeInternal _SetSettingResponse_default_instance_;
class Setting;
class SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class SettingOptions;
class SettingOptionsDefaultTypeInternal;
extern SettingOptionsDefaultTypeInternal _SettingOptions_default_instance_;
class StartPhotoIntervalRequest;
class StartPhotoIntervalRequestDefaultTypeInternal;
extern StartPhotoIntervalRequestDefaultTypeInternal _StartPhotoIntervalRequest_default_instance_;
class StartPhotoIntervalResponse;
class StartPhotoIntervalResponseDefaultTypeInternal;
extern StartPhotoIntervalResponseDefaultTypeInternal _StartPhotoIntervalResponse_default_instance_;
class StartVideoRequest;
class StartVideoRequestDefaultTypeInternal;
extern StartVideoRequestDefaultTypeInternal _StartVideoRequest_default_instance_;
class StartVideoResponse;
class StartVideoResponseDefaultTypeInternal;
extern StartVideoResponseDefaultTypeInternal _StartVideoResponse_default_instance_;
class StartVideoStreamingRequest;
class StartVideoStreamingRequestDefaultTypeInternal;
extern StartVideoStreamingRequestDefaultTypeInternal _StartVideoStreamingRequest_default_instance_;
class StartVideoStreamingResponse;
class StartVideoStreamingResponseDefaultTypeInternal;
extern StartVideoStreamingResponseDefaultTypeInternal _StartVideoStreamingResponse_default_instance_;
class StopPhotoIntervalRequest;
class StopPhotoIntervalRequestDefaultTypeInternal;
extern StopPhotoIntervalRequestDefaultTypeInternal _StopPhotoIntervalRequest_default_instance_;
class StopPhotoIntervalResponse;
class StopPhotoIntervalResponseDefaultTypeInternal;
extern StopPhotoIntervalResponseDefaultTypeInternal _StopPhotoIntervalResponse_default_instance_;
class StopVideoRequest;
class StopVideoRequestDefaultTypeInternal;
extern StopVideoRequestDefaultTypeInternal _StopVideoRequest_default_instance_;
class StopVideoResponse;
class StopVideoResponseDefaultTypeInternal;
extern StopVideoResponseDefaultTypeInternal _StopVideoResponse_default_instance_;
class StopVideoStreamingRequest;
class StopVideoStreamingRequestDefaultTypeInternal;
extern StopVideoStreamingRequestDefaultTypeInternal _StopVideoStreamingRequest_default_instance_;
class StopVideoStreamingResponse;
class StopVideoStreamingResponseDefaultTypeInternal;
extern StopVideoStreamingResponseDefaultTypeInternal _StopVideoStreamingResponse_default_instance_;
class SubscribeCameraStatusRequest;
class SubscribeCameraStatusRequestDefaultTypeInternal;
extern SubscribeCameraStatusRequestDefaultTypeInternal _SubscribeCameraStatusRequest_default_instance_;
class SubscribeCaptureInfoRequest;
class SubscribeCaptureInfoRequestDefaultTypeInternal;
extern SubscribeCaptureInfoRequestDefaultTypeInternal _SubscribeCaptureInfoRequest_default_instance_;
class SubscribeCurrentSettingsRequest;
class SubscribeCurrentSettingsRequestDefaultTypeInternal;
extern SubscribeCurrentSettingsRequestDefaultTypeInternal _SubscribeCurrentSettingsRequest_default_instance_;
class SubscribeModeRequest;
class SubscribeModeRequestDefaultTypeInternal;
extern SubscribeModeRequestDefaultTypeInternal _SubscribeModeRequest_default_instance_;
class SubscribePossibleSettingOptionsRequest;
class SubscribePossibleSettingOptionsRequestDefaultTypeInternal;
extern SubscribePossibleSettingOptionsRequestDefaultTypeInternal _SubscribePossibleSettingOptionsRequest_default_instance_;
class SubscribeVideoStreamInfoRequest;
class SubscribeVideoStreamInfoRequestDefaultTypeInternal;
extern SubscribeVideoStreamInfoRequestDefaultTypeInternal _SubscribeVideoStreamInfoRequest_default_instance_;
class TakePhotoRequest;
class TakePhotoRequestDefaultTypeInternal;
extern TakePhotoRequestDefaultTypeInternal _TakePhotoRequest_default_instance_;
class TakePhotoResponse;
class TakePhotoResponseDefaultTypeInternal;
extern TakePhotoResponseDefaultTypeInternal _TakePhotoResponse_default_instance_;
class VideoStreamInfo;
class VideoStreamInfoDefaultTypeInternal;
extern VideoStreamInfoDefaultTypeInternal _VideoStreamInfo_default_instance_;
class VideoStreamInfoResponse;
class VideoStreamInfoResponseDefaultTypeInternal;
extern VideoStreamInfoResponseDefaultTypeInternal _VideoStreamInfoResponse_default_instance_;
class VideoStreamSettings;
class VideoStreamSettingsDefaultTypeInternal;
extern VideoStreamSettingsDefaultTypeInternal _VideoStreamSettings_default_instance_;
}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::camera::CameraResult* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(Arena*);
template<> ::mavsdk::rpc::camera::CameraStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraStatus>(Arena*);
template<> ::mavsdk::rpc::camera::CameraStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CameraStatusResponse>(Arena*);
template<> ::mavsdk::rpc::camera::CaptureInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfo>(Arena*);
template<> ::mavsdk::rpc::camera::CaptureInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::CurrentSettingsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::CurrentSettingsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::camera::ModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::ModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Option* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Option>(Arena*);
template<> ::mavsdk::rpc::camera::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Position>(Arena*);
template<> ::mavsdk::rpc::camera::PossibleSettingOptionsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::PossibleSettingOptionsResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Quaternion>(Arena*);
template<> ::mavsdk::rpc::camera::SetModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SetModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetModeResponse>(Arena*);
template<> ::mavsdk::rpc::camera::SetSettingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetSettingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SetSettingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SetSettingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::Setting* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(Arena*);
template<> ::mavsdk::rpc::camera::SettingOptions* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SettingOptions>(Arena*);
template<> ::mavsdk::rpc::camera::StartPhotoIntervalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartPhotoIntervalRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartPhotoIntervalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartPhotoIntervalResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StartVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StartVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopPhotoIntervalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopPhotoIntervalRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopPhotoIntervalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopPhotoIntervalResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoStreamingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoStreamingRequest>(Arena*);
template<> ::mavsdk::rpc::camera::StopVideoStreamingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::StopVideoStreamingResponse>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCameraStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCameraStatusRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCaptureInfoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeModeRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest>(Arena*);
template<> ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TakePhotoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TakePhotoRequest>(Arena*);
template<> ::mavsdk::rpc::camera::TakePhotoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::TakePhotoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfo>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfoResponse>(Arena*);
template<> ::mavsdk::rpc::camera::VideoStreamSettings* Arena::CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace camera {

enum CameraResult_Result : int {
  CameraResult_Result_UNKNOWN = 0,
  CameraResult_Result_SUCCESS = 1,
  CameraResult_Result_IN_PROGRESS = 2,
  CameraResult_Result_BUSY = 3,
  CameraResult_Result_DENIED = 4,
  CameraResult_Result_ERROR = 5,
  CameraResult_Result_TIMEOUT = 6,
  CameraResult_Result_WRONG_ARGUMENT = 7,
  CameraResult_Result_CameraResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraResult_Result_CameraResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraResult_Result_IsValid(int value);
constexpr CameraResult_Result CameraResult_Result_Result_MIN = CameraResult_Result_UNKNOWN;
constexpr CameraResult_Result CameraResult_Result_Result_MAX = CameraResult_Result_WRONG_ARGUMENT;
constexpr int CameraResult_Result_Result_ARRAYSIZE = CameraResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraResult_Result_descriptor();
template<typename T>
inline const std::string& CameraResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraResult_Result_descriptor(), enum_t_value);
}
inline bool CameraResult_Result_Parse(
    const std::string& name, CameraResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraResult_Result>(
    CameraResult_Result_descriptor(), name, value);
}
enum VideoStreamInfo_VideoStreamStatus : int {
  VideoStreamInfo_VideoStreamStatus_NOT_RUNNING = 0,
  VideoStreamInfo_VideoStreamStatus_IN_PROGRESS = 1,
  VideoStreamInfo_VideoStreamStatus_VideoStreamInfo_VideoStreamStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VideoStreamInfo_VideoStreamStatus_VideoStreamInfo_VideoStreamStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VideoStreamInfo_VideoStreamStatus_IsValid(int value);
constexpr VideoStreamInfo_VideoStreamStatus VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MIN = VideoStreamInfo_VideoStreamStatus_NOT_RUNNING;
constexpr VideoStreamInfo_VideoStreamStatus VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX = VideoStreamInfo_VideoStreamStatus_IN_PROGRESS;
constexpr int VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_ARRAYSIZE = VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoStreamInfo_VideoStreamStatus_descriptor();
template<typename T>
inline const std::string& VideoStreamInfo_VideoStreamStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoStreamInfo_VideoStreamStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoStreamInfo_VideoStreamStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoStreamInfo_VideoStreamStatus_descriptor(), enum_t_value);
}
inline bool VideoStreamInfo_VideoStreamStatus_Parse(
    const std::string& name, VideoStreamInfo_VideoStreamStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoStreamInfo_VideoStreamStatus>(
    VideoStreamInfo_VideoStreamStatus_descriptor(), name, value);
}
enum CameraStatus_StorageStatus : int {
  CameraStatus_StorageStatus_NOT_AVAILABLE = 0,
  CameraStatus_StorageStatus_UNFORMATTED = 1,
  CameraStatus_StorageStatus_FORMATTED = 2,
  CameraStatus_StorageStatus_CameraStatus_StorageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraStatus_StorageStatus_CameraStatus_StorageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraStatus_StorageStatus_IsValid(int value);
constexpr CameraStatus_StorageStatus CameraStatus_StorageStatus_StorageStatus_MIN = CameraStatus_StorageStatus_NOT_AVAILABLE;
constexpr CameraStatus_StorageStatus CameraStatus_StorageStatus_StorageStatus_MAX = CameraStatus_StorageStatus_FORMATTED;
constexpr int CameraStatus_StorageStatus_StorageStatus_ARRAYSIZE = CameraStatus_StorageStatus_StorageStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraStatus_StorageStatus_descriptor();
template<typename T>
inline const std::string& CameraStatus_StorageStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraStatus_StorageStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraStatus_StorageStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraStatus_StorageStatus_descriptor(), enum_t_value);
}
inline bool CameraStatus_StorageStatus_Parse(
    const std::string& name, CameraStatus_StorageStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraStatus_StorageStatus>(
    CameraStatus_StorageStatus_descriptor(), name, value);
}
enum CameraMode : int {
  UNKNOWN = 0,
  PHOTO = 1,
  VIDEO = 2,
  CameraMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraMode_IsValid(int value);
constexpr CameraMode CameraMode_MIN = UNKNOWN;
constexpr CameraMode CameraMode_MAX = VIDEO;
constexpr int CameraMode_ARRAYSIZE = CameraMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraMode_descriptor();
template<typename T>
inline const std::string& CameraMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraMode_descriptor(), enum_t_value);
}
inline bool CameraMode_Parse(
    const std::string& name, CameraMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraMode>(
    CameraMode_descriptor(), name, value);
}
// ===================================================================

class TakePhotoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TakePhotoRequest) */ {
 public:
  TakePhotoRequest();
  virtual ~TakePhotoRequest();

  TakePhotoRequest(const TakePhotoRequest& from);
  TakePhotoRequest(TakePhotoRequest&& from) noexcept
    : TakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline TakePhotoRequest& operator=(const TakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoRequest& operator=(TakePhotoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TakePhotoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const TakePhotoRequest*>(
               &_TakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TakePhotoRequest& a, TakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakePhotoRequest* New() const final {
    return CreateMaybeMessage<TakePhotoRequest>(nullptr);
  }

  TakePhotoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakePhotoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TakePhotoRequest& from);
  void MergeFrom(const TakePhotoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TakePhotoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TakePhotoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class TakePhotoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.TakePhotoResponse) */ {
 public:
  TakePhotoResponse();
  virtual ~TakePhotoResponse();

  TakePhotoResponse(const TakePhotoResponse& from);
  TakePhotoResponse(TakePhotoResponse&& from) noexcept
    : TakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline TakePhotoResponse& operator=(const TakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoResponse& operator=(TakePhotoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TakePhotoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const TakePhotoResponse*>(
               &_TakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TakePhotoResponse& a, TakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakePhotoResponse* New() const final {
    return CreateMaybeMessage<TakePhotoResponse>(nullptr);
  }

  TakePhotoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakePhotoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TakePhotoResponse& from);
  void MergeFrom(const TakePhotoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakePhotoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.TakePhotoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.TakePhotoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartPhotoIntervalRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartPhotoIntervalRequest) */ {
 public:
  StartPhotoIntervalRequest();
  virtual ~StartPhotoIntervalRequest();

  StartPhotoIntervalRequest(const StartPhotoIntervalRequest& from);
  StartPhotoIntervalRequest(StartPhotoIntervalRequest&& from) noexcept
    : StartPhotoIntervalRequest() {
    *this = ::std::move(from);
  }

  inline StartPhotoIntervalRequest& operator=(const StartPhotoIntervalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPhotoIntervalRequest& operator=(StartPhotoIntervalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartPhotoIntervalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartPhotoIntervalRequest* internal_default_instance() {
    return reinterpret_cast<const StartPhotoIntervalRequest*>(
               &_StartPhotoIntervalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartPhotoIntervalRequest& a, StartPhotoIntervalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPhotoIntervalRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartPhotoIntervalRequest* New() const final {
    return CreateMaybeMessage<StartPhotoIntervalRequest>(nullptr);
  }

  StartPhotoIntervalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartPhotoIntervalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartPhotoIntervalRequest& from);
  void MergeFrom(const StartPhotoIntervalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPhotoIntervalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartPhotoIntervalRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalSFieldNumber = 1,
  };
  // float interval_s = 1;
  void clear_interval_s();
  float interval_s() const;
  void set_interval_s(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartPhotoIntervalRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float interval_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartPhotoIntervalResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartPhotoIntervalResponse) */ {
 public:
  StartPhotoIntervalResponse();
  virtual ~StartPhotoIntervalResponse();

  StartPhotoIntervalResponse(const StartPhotoIntervalResponse& from);
  StartPhotoIntervalResponse(StartPhotoIntervalResponse&& from) noexcept
    : StartPhotoIntervalResponse() {
    *this = ::std::move(from);
  }

  inline StartPhotoIntervalResponse& operator=(const StartPhotoIntervalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPhotoIntervalResponse& operator=(StartPhotoIntervalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartPhotoIntervalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartPhotoIntervalResponse* internal_default_instance() {
    return reinterpret_cast<const StartPhotoIntervalResponse*>(
               &_StartPhotoIntervalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartPhotoIntervalResponse& a, StartPhotoIntervalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPhotoIntervalResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartPhotoIntervalResponse* New() const final {
    return CreateMaybeMessage<StartPhotoIntervalResponse>(nullptr);
  }

  StartPhotoIntervalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartPhotoIntervalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartPhotoIntervalResponse& from);
  void MergeFrom(const StartPhotoIntervalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPhotoIntervalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartPhotoIntervalResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartPhotoIntervalResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopPhotoIntervalRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopPhotoIntervalRequest) */ {
 public:
  StopPhotoIntervalRequest();
  virtual ~StopPhotoIntervalRequest();

  StopPhotoIntervalRequest(const StopPhotoIntervalRequest& from);
  StopPhotoIntervalRequest(StopPhotoIntervalRequest&& from) noexcept
    : StopPhotoIntervalRequest() {
    *this = ::std::move(from);
  }

  inline StopPhotoIntervalRequest& operator=(const StopPhotoIntervalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPhotoIntervalRequest& operator=(StopPhotoIntervalRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPhotoIntervalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPhotoIntervalRequest* internal_default_instance() {
    return reinterpret_cast<const StopPhotoIntervalRequest*>(
               &_StopPhotoIntervalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopPhotoIntervalRequest& a, StopPhotoIntervalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPhotoIntervalRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPhotoIntervalRequest* New() const final {
    return CreateMaybeMessage<StopPhotoIntervalRequest>(nullptr);
  }

  StopPhotoIntervalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPhotoIntervalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPhotoIntervalRequest& from);
  void MergeFrom(const StopPhotoIntervalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPhotoIntervalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopPhotoIntervalRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopPhotoIntervalRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopPhotoIntervalResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopPhotoIntervalResponse) */ {
 public:
  StopPhotoIntervalResponse();
  virtual ~StopPhotoIntervalResponse();

  StopPhotoIntervalResponse(const StopPhotoIntervalResponse& from);
  StopPhotoIntervalResponse(StopPhotoIntervalResponse&& from) noexcept
    : StopPhotoIntervalResponse() {
    *this = ::std::move(from);
  }

  inline StopPhotoIntervalResponse& operator=(const StopPhotoIntervalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPhotoIntervalResponse& operator=(StopPhotoIntervalResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPhotoIntervalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPhotoIntervalResponse* internal_default_instance() {
    return reinterpret_cast<const StopPhotoIntervalResponse*>(
               &_StopPhotoIntervalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopPhotoIntervalResponse& a, StopPhotoIntervalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPhotoIntervalResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPhotoIntervalResponse* New() const final {
    return CreateMaybeMessage<StopPhotoIntervalResponse>(nullptr);
  }

  StopPhotoIntervalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPhotoIntervalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPhotoIntervalResponse& from);
  void MergeFrom(const StopPhotoIntervalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPhotoIntervalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopPhotoIntervalResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopPhotoIntervalResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoRequest) */ {
 public:
  StartVideoRequest();
  virtual ~StartVideoRequest();

  StartVideoRequest(const StartVideoRequest& from);
  StartVideoRequest(StartVideoRequest&& from) noexcept
    : StartVideoRequest() {
    *this = ::std::move(from);
  }

  inline StartVideoRequest& operator=(const StartVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoRequest& operator=(StartVideoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartVideoRequest* internal_default_instance() {
    return reinterpret_cast<const StartVideoRequest*>(
               &_StartVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StartVideoRequest& a, StartVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVideoRequest* New() const final {
    return CreateMaybeMessage<StartVideoRequest>(nullptr);
  }

  StartVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVideoRequest& from);
  void MergeFrom(const StartVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoResponse) */ {
 public:
  StartVideoResponse();
  virtual ~StartVideoResponse();

  StartVideoResponse(const StartVideoResponse& from);
  StartVideoResponse(StartVideoResponse&& from) noexcept
    : StartVideoResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoResponse& operator=(const StartVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoResponse& operator=(StartVideoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVideoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoResponse*>(
               &_StartVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StartVideoResponse& a, StartVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVideoResponse* New() const final {
    return CreateMaybeMessage<StartVideoResponse>(nullptr);
  }

  StartVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVideoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVideoResponse& from);
  void MergeFrom(const StartVideoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoRequest) */ {
 public:
  StopVideoRequest();
  virtual ~StopVideoRequest();

  StopVideoRequest(const StopVideoRequest& from);
  StopVideoRequest(StopVideoRequest&& from) noexcept
    : StopVideoRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoRequest& operator=(const StopVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoRequest& operator=(StopVideoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoRequest*>(
               &_StopVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopVideoRequest& a, StopVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoRequest* New() const final {
    return CreateMaybeMessage<StopVideoRequest>(nullptr);
  }

  StopVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoRequest& from);
  void MergeFrom(const StopVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoResponse) */ {
 public:
  StopVideoResponse();
  virtual ~StopVideoResponse();

  StopVideoResponse(const StopVideoResponse& from);
  StopVideoResponse(StopVideoResponse&& from) noexcept
    : StopVideoResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoResponse& operator=(const StopVideoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoResponse& operator=(StopVideoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoResponse*>(
               &_StopVideoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopVideoResponse& a, StopVideoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoResponse* New() const final {
    return CreateMaybeMessage<StopVideoResponse>(nullptr);
  }

  StopVideoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoResponse& from);
  void MergeFrom(const StopVideoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoStreamingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoStreamingRequest) */ {
 public:
  StartVideoStreamingRequest();
  virtual ~StartVideoStreamingRequest();

  StartVideoStreamingRequest(const StartVideoStreamingRequest& from);
  StartVideoStreamingRequest(StartVideoStreamingRequest&& from) noexcept
    : StartVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StartVideoStreamingRequest& operator=(const StartVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoStreamingRequest& operator=(StartVideoStreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVideoStreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StartVideoStreamingRequest*>(
               &_StartVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StartVideoStreamingRequest& a, StartVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoStreamingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVideoStreamingRequest* New() const final {
    return CreateMaybeMessage<StartVideoStreamingRequest>(nullptr);
  }

  StartVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVideoStreamingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVideoStreamingRequest& from);
  void MergeFrom(const StartVideoStreamingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoStreamingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoStreamingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoStreamingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StartVideoStreamingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StartVideoStreamingResponse) */ {
 public:
  StartVideoStreamingResponse();
  virtual ~StartVideoStreamingResponse();

  StartVideoStreamingResponse(const StartVideoStreamingResponse& from);
  StartVideoStreamingResponse(StartVideoStreamingResponse&& from) noexcept
    : StartVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StartVideoStreamingResponse& operator=(const StartVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoStreamingResponse& operator=(StartVideoStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartVideoStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StartVideoStreamingResponse*>(
               &_StartVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StartVideoStreamingResponse& a, StartVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoStreamingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartVideoStreamingResponse* New() const final {
    return CreateMaybeMessage<StartVideoStreamingResponse>(nullptr);
  }

  StartVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartVideoStreamingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartVideoStreamingResponse& from);
  void MergeFrom(const StartVideoStreamingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartVideoStreamingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StartVideoStreamingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StartVideoStreamingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoStreamingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoStreamingRequest) */ {
 public:
  StopVideoStreamingRequest();
  virtual ~StopVideoStreamingRequest();

  StopVideoStreamingRequest(const StopVideoStreamingRequest& from);
  StopVideoStreamingRequest(StopVideoStreamingRequest&& from) noexcept
    : StopVideoStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoStreamingRequest& operator=(const StopVideoStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoStreamingRequest& operator=(StopVideoStreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoStreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoStreamingRequest*>(
               &_StopVideoStreamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StopVideoStreamingRequest& a, StopVideoStreamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoStreamingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoStreamingRequest* New() const final {
    return CreateMaybeMessage<StopVideoStreamingRequest>(nullptr);
  }

  StopVideoStreamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoStreamingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoStreamingRequest& from);
  void MergeFrom(const StopVideoStreamingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoStreamingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoStreamingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoStreamingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class StopVideoStreamingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.StopVideoStreamingResponse) */ {
 public:
  StopVideoStreamingResponse();
  virtual ~StopVideoStreamingResponse();

  StopVideoStreamingResponse(const StopVideoStreamingResponse& from);
  StopVideoStreamingResponse(StopVideoStreamingResponse&& from) noexcept
    : StopVideoStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StopVideoStreamingResponse& operator=(const StopVideoStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoStreamingResponse& operator=(StopVideoStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StopVideoStreamingResponse*>(
               &_StopVideoStreamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StopVideoStreamingResponse& a, StopVideoStreamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoStreamingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoStreamingResponse* New() const final {
    return CreateMaybeMessage<StopVideoStreamingResponse>(nullptr);
  }

  StopVideoStreamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoStreamingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoStreamingResponse& from);
  void MergeFrom(const StopVideoStreamingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoStreamingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.StopVideoStreamingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.StopVideoStreamingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetModeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetModeRequest) */ {
 public:
  SetModeRequest();
  virtual ~SetModeRequest();

  SetModeRequest(const SetModeRequest& from);
  SetModeRequest(SetModeRequest&& from) noexcept
    : SetModeRequest() {
    *this = ::std::move(from);
  }

  inline SetModeRequest& operator=(const SetModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModeRequest& operator=(SetModeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetModeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetModeRequest* internal_default_instance() {
    return reinterpret_cast<const SetModeRequest*>(
               &_SetModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetModeRequest& a, SetModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetModeRequest* New() const final {
    return CreateMaybeMessage<SetModeRequest>(nullptr);
  }

  SetModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetModeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetModeRequest& from);
  void MergeFrom(const SetModeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetModeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraModeFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  void clear_camera_mode();
  ::mavsdk::rpc::camera::CameraMode camera_mode() const;
  void set_camera_mode(::mavsdk::rpc::camera::CameraMode value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetModeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int camera_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetModeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetModeResponse) */ {
 public:
  SetModeResponse();
  virtual ~SetModeResponse();

  SetModeResponse(const SetModeResponse& from);
  SetModeResponse(SetModeResponse&& from) noexcept
    : SetModeResponse() {
    *this = ::std::move(from);
  }

  inline SetModeResponse& operator=(const SetModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetModeResponse& operator=(SetModeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetModeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetModeResponse* internal_default_instance() {
    return reinterpret_cast<const SetModeResponse*>(
               &_SetModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetModeResponse& a, SetModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetModeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetModeResponse* New() const final {
    return CreateMaybeMessage<SetModeResponse>(nullptr);
  }

  SetModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetModeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetModeResponse& from);
  void MergeFrom(const SetModeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetModeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetModeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetModeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeModeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeModeRequest) */ {
 public:
  SubscribeModeRequest();
  virtual ~SubscribeModeRequest();

  SubscribeModeRequest(const SubscribeModeRequest& from);
  SubscribeModeRequest(SubscribeModeRequest&& from) noexcept
    : SubscribeModeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeModeRequest& operator=(const SubscribeModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeModeRequest& operator=(SubscribeModeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeModeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeModeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeModeRequest*>(
               &_SubscribeModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubscribeModeRequest& a, SubscribeModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeModeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeModeRequest* New() const final {
    return CreateMaybeMessage<SubscribeModeRequest>(nullptr);
  }

  SubscribeModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeModeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeModeRequest& from);
  void MergeFrom(const SubscribeModeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeModeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeModeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeModeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class ModeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.ModeResponse) */ {
 public:
  ModeResponse();
  virtual ~ModeResponse();

  ModeResponse(const ModeResponse& from);
  ModeResponse(ModeResponse&& from) noexcept
    : ModeResponse() {
    *this = ::std::move(from);
  }

  inline ModeResponse& operator=(const ModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeResponse& operator=(ModeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModeResponse* internal_default_instance() {
    return reinterpret_cast<const ModeResponse*>(
               &_ModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ModeResponse& a, ModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModeResponse* New() const final {
    return CreateMaybeMessage<ModeResponse>(nullptr);
  }

  ModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModeResponse& from);
  void MergeFrom(const ModeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.ModeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraModeFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  void clear_camera_mode();
  ::mavsdk::rpc::camera::CameraMode camera_mode() const;
  void set_camera_mode(::mavsdk::rpc::camera::CameraMode value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.ModeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int camera_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeVideoStreamInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest) */ {
 public:
  SubscribeVideoStreamInfoRequest();
  virtual ~SubscribeVideoStreamInfoRequest();

  SubscribeVideoStreamInfoRequest(const SubscribeVideoStreamInfoRequest& from);
  SubscribeVideoStreamInfoRequest(SubscribeVideoStreamInfoRequest&& from) noexcept
    : SubscribeVideoStreamInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeVideoStreamInfoRequest& operator=(const SubscribeVideoStreamInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeVideoStreamInfoRequest& operator=(SubscribeVideoStreamInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeVideoStreamInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeVideoStreamInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeVideoStreamInfoRequest*>(
               &_SubscribeVideoStreamInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeVideoStreamInfoRequest& a, SubscribeVideoStreamInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeVideoStreamInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeVideoStreamInfoRequest* New() const final {
    return CreateMaybeMessage<SubscribeVideoStreamInfoRequest>(nullptr);
  }

  SubscribeVideoStreamInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeVideoStreamInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeVideoStreamInfoRequest& from);
  void MergeFrom(const SubscribeVideoStreamInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeVideoStreamInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamInfoResponse) */ {
 public:
  VideoStreamInfoResponse();
  virtual ~VideoStreamInfoResponse();

  VideoStreamInfoResponse(const VideoStreamInfoResponse& from);
  VideoStreamInfoResponse(VideoStreamInfoResponse&& from) noexcept
    : VideoStreamInfoResponse() {
    *this = ::std::move(from);
  }

  inline VideoStreamInfoResponse& operator=(const VideoStreamInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamInfoResponse& operator=(VideoStreamInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoStreamInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoStreamInfoResponse* internal_default_instance() {
    return reinterpret_cast<const VideoStreamInfoResponse*>(
               &_VideoStreamInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VideoStreamInfoResponse& a, VideoStreamInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoStreamInfoResponse* New() const final {
    return CreateMaybeMessage<VideoStreamInfoResponse>(nullptr);
  }

  VideoStreamInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoStreamInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoStreamInfoResponse& from);
  void MergeFrom(const VideoStreamInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoStreamInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
  bool has_video_stream_info() const;
  private:
  bool _internal_has_video_stream_info() const;
  public:
  void clear_video_stream_info();
  const ::mavsdk::rpc::camera::VideoStreamInfo& video_stream_info() const;
  ::mavsdk::rpc::camera::VideoStreamInfo* release_video_stream_info();
  ::mavsdk::rpc::camera::VideoStreamInfo* mutable_video_stream_info();
  void set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCaptureInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCaptureInfoRequest) */ {
 public:
  SubscribeCaptureInfoRequest();
  virtual ~SubscribeCaptureInfoRequest();

  SubscribeCaptureInfoRequest(const SubscribeCaptureInfoRequest& from);
  SubscribeCaptureInfoRequest(SubscribeCaptureInfoRequest&& from) noexcept
    : SubscribeCaptureInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCaptureInfoRequest& operator=(const SubscribeCaptureInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCaptureInfoRequest& operator=(SubscribeCaptureInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCaptureInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCaptureInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCaptureInfoRequest*>(
               &_SubscribeCaptureInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SubscribeCaptureInfoRequest& a, SubscribeCaptureInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCaptureInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCaptureInfoRequest* New() const final {
    return CreateMaybeMessage<SubscribeCaptureInfoRequest>(nullptr);
  }

  SubscribeCaptureInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCaptureInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCaptureInfoRequest& from);
  void MergeFrom(const SubscribeCaptureInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCaptureInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCaptureInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CaptureInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CaptureInfoResponse) */ {
 public:
  CaptureInfoResponse();
  virtual ~CaptureInfoResponse();

  CaptureInfoResponse(const CaptureInfoResponse& from);
  CaptureInfoResponse(CaptureInfoResponse&& from) noexcept
    : CaptureInfoResponse() {
    *this = ::std::move(from);
  }

  inline CaptureInfoResponse& operator=(const CaptureInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfoResponse& operator=(CaptureInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptureInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptureInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CaptureInfoResponse*>(
               &_CaptureInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CaptureInfoResponse& a, CaptureInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptureInfoResponse* New() const final {
    return CreateMaybeMessage<CaptureInfoResponse>(nullptr);
  }

  CaptureInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptureInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptureInfoResponse& from);
  void MergeFrom(const CaptureInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CaptureInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
  bool has_capture_info() const;
  private:
  bool _internal_has_capture_info() const;
  public:
  void clear_capture_info();
  const ::mavsdk::rpc::camera::CaptureInfo& capture_info() const;
  ::mavsdk::rpc::camera::CaptureInfo* release_capture_info();
  ::mavsdk::rpc::camera::CaptureInfo* mutable_capture_info();
  void set_allocated_capture_info(::mavsdk::rpc::camera::CaptureInfo* capture_info);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CaptureInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CaptureInfo* capture_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCameraStatusRequest) */ {
 public:
  SubscribeCameraStatusRequest();
  virtual ~SubscribeCameraStatusRequest();

  SubscribeCameraStatusRequest(const SubscribeCameraStatusRequest& from);
  SubscribeCameraStatusRequest(SubscribeCameraStatusRequest&& from) noexcept
    : SubscribeCameraStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraStatusRequest& operator=(const SubscribeCameraStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraStatusRequest& operator=(SubscribeCameraStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCameraStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCameraStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraStatusRequest*>(
               &_SubscribeCameraStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeCameraStatusRequest& a, SubscribeCameraStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCameraStatusRequest* New() const final {
    return CreateMaybeMessage<SubscribeCameraStatusRequest>(nullptr);
  }

  SubscribeCameraStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCameraStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCameraStatusRequest& from);
  void MergeFrom(const SubscribeCameraStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCameraStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCameraStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraStatusResponse) */ {
 public:
  CameraStatusResponse();
  virtual ~CameraStatusResponse();

  CameraStatusResponse(const CameraStatusResponse& from);
  CameraStatusResponse(CameraStatusResponse&& from) noexcept
    : CameraStatusResponse() {
    *this = ::std::move(from);
  }

  inline CameraStatusResponse& operator=(const CameraStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraStatusResponse& operator=(CameraStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CameraStatusResponse*>(
               &_CameraStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CameraStatusResponse& a, CameraStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraStatusResponse* New() const final {
    return CreateMaybeMessage<CameraStatusResponse>(nullptr);
  }

  CameraStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraStatusResponse& from);
  void MergeFrom(const CameraStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
  bool has_camera_status() const;
  private:
  bool _internal_has_camera_status() const;
  public:
  void clear_camera_status();
  const ::mavsdk::rpc::camera::CameraStatus& camera_status() const;
  ::mavsdk::rpc::camera::CameraStatus* release_camera_status();
  ::mavsdk::rpc::camera::CameraStatus* mutable_camera_status();
  void set_allocated_camera_status(::mavsdk::rpc::camera::CameraStatus* camera_status);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraStatus* camera_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCurrentSettingsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest) */ {
 public:
  SubscribeCurrentSettingsRequest();
  virtual ~SubscribeCurrentSettingsRequest();

  SubscribeCurrentSettingsRequest(const SubscribeCurrentSettingsRequest& from);
  SubscribeCurrentSettingsRequest(SubscribeCurrentSettingsRequest&& from) noexcept
    : SubscribeCurrentSettingsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCurrentSettingsRequest& operator=(const SubscribeCurrentSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCurrentSettingsRequest& operator=(SubscribeCurrentSettingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCurrentSettingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCurrentSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCurrentSettingsRequest*>(
               &_SubscribeCurrentSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SubscribeCurrentSettingsRequest& a, SubscribeCurrentSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCurrentSettingsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCurrentSettingsRequest* New() const final {
    return CreateMaybeMessage<SubscribeCurrentSettingsRequest>(nullptr);
  }

  SubscribeCurrentSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCurrentSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCurrentSettingsRequest& from);
  void MergeFrom(const SubscribeCurrentSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCurrentSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribeCurrentSettingsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CurrentSettingsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CurrentSettingsResponse) */ {
 public:
  CurrentSettingsResponse();
  virtual ~CurrentSettingsResponse();

  CurrentSettingsResponse(const CurrentSettingsResponse& from);
  CurrentSettingsResponse(CurrentSettingsResponse&& from) noexcept
    : CurrentSettingsResponse() {
    *this = ::std::move(from);
  }

  inline CurrentSettingsResponse& operator=(const CurrentSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentSettingsResponse& operator=(CurrentSettingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentSettingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const CurrentSettingsResponse*>(
               &_CurrentSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CurrentSettingsResponse& a, CurrentSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentSettingsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentSettingsResponse* New() const final {
    return CreateMaybeMessage<CurrentSettingsResponse>(nullptr);
  }

  CurrentSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentSettingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentSettingsResponse& from);
  void MergeFrom(const CurrentSettingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentSettingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CurrentSettingsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSettingsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
  int current_settings_size() const;
  void clear_current_settings();
  ::mavsdk::rpc::camera::Setting* mutable_current_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
      mutable_current_settings();
  const ::mavsdk::rpc::camera::Setting& current_settings(int index) const;
  ::mavsdk::rpc::camera::Setting* add_current_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
      current_settings() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CurrentSettingsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting > current_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SubscribePossibleSettingOptionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest) */ {
 public:
  SubscribePossibleSettingOptionsRequest();
  virtual ~SubscribePossibleSettingOptionsRequest();

  SubscribePossibleSettingOptionsRequest(const SubscribePossibleSettingOptionsRequest& from);
  SubscribePossibleSettingOptionsRequest(SubscribePossibleSettingOptionsRequest&& from) noexcept
    : SubscribePossibleSettingOptionsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribePossibleSettingOptionsRequest& operator=(const SubscribePossibleSettingOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribePossibleSettingOptionsRequest& operator=(SubscribePossibleSettingOptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribePossibleSettingOptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribePossibleSettingOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribePossibleSettingOptionsRequest*>(
               &_SubscribePossibleSettingOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SubscribePossibleSettingOptionsRequest& a, SubscribePossibleSettingOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribePossibleSettingOptionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribePossibleSettingOptionsRequest* New() const final {
    return CreateMaybeMessage<SubscribePossibleSettingOptionsRequest>(nullptr);
  }

  SubscribePossibleSettingOptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribePossibleSettingOptionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribePossibleSettingOptionsRequest& from);
  void MergeFrom(const SubscribePossibleSettingOptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribePossibleSettingOptionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class PossibleSettingOptionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.PossibleSettingOptionsResponse) */ {
 public:
  PossibleSettingOptionsResponse();
  virtual ~PossibleSettingOptionsResponse();

  PossibleSettingOptionsResponse(const PossibleSettingOptionsResponse& from);
  PossibleSettingOptionsResponse(PossibleSettingOptionsResponse&& from) noexcept
    : PossibleSettingOptionsResponse() {
    *this = ::std::move(from);
  }

  inline PossibleSettingOptionsResponse& operator=(const PossibleSettingOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PossibleSettingOptionsResponse& operator=(PossibleSettingOptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PossibleSettingOptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PossibleSettingOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const PossibleSettingOptionsResponse*>(
               &_PossibleSettingOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PossibleSettingOptionsResponse& a, PossibleSettingOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PossibleSettingOptionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PossibleSettingOptionsResponse* New() const final {
    return CreateMaybeMessage<PossibleSettingOptionsResponse>(nullptr);
  }

  PossibleSettingOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PossibleSettingOptionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PossibleSettingOptionsResponse& from);
  void MergeFrom(const PossibleSettingOptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PossibleSettingOptionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.PossibleSettingOptionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingOptionsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
  int setting_options_size() const;
  void clear_setting_options();
  ::mavsdk::rpc::camera::SettingOptions* mutable_setting_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
      mutable_setting_options();
  const ::mavsdk::rpc::camera::SettingOptions& setting_options(int index) const;
  ::mavsdk::rpc::camera::SettingOptions* add_setting_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
      setting_options() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions > setting_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetSettingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetSettingRequest) */ {
 public:
  SetSettingRequest();
  virtual ~SetSettingRequest();

  SetSettingRequest(const SetSettingRequest& from);
  SetSettingRequest(SetSettingRequest&& from) noexcept
    : SetSettingRequest() {
    *this = ::std::move(from);
  }

  inline SetSettingRequest& operator=(const SetSettingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSettingRequest& operator=(SetSettingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSettingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSettingRequest* internal_default_instance() {
    return reinterpret_cast<const SetSettingRequest*>(
               &_SetSettingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetSettingRequest& a, SetSettingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSettingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSettingRequest* New() const final {
    return CreateMaybeMessage<SetSettingRequest>(nullptr);
  }

  SetSettingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSettingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSettingRequest& from);
  void MergeFrom(const SetSettingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSettingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetSettingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.Setting setting = 1;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::mavsdk::rpc::camera::Setting& setting() const;
  ::mavsdk::rpc::camera::Setting* release_setting();
  ::mavsdk::rpc::camera::Setting* mutable_setting();
  void set_allocated_setting(::mavsdk::rpc::camera::Setting* setting);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetSettingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::Setting* setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetSettingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SetSettingResponse) */ {
 public:
  SetSettingResponse();
  virtual ~SetSettingResponse();

  SetSettingResponse(const SetSettingResponse& from);
  SetSettingResponse(SetSettingResponse&& from) noexcept
    : SetSettingResponse() {
    *this = ::std::move(from);
  }

  inline SetSettingResponse& operator=(const SetSettingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSettingResponse& operator=(SetSettingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSettingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSettingResponse* internal_default_instance() {
    return reinterpret_cast<const SetSettingResponse*>(
               &_SetSettingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SetSettingResponse& a, SetSettingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSettingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSettingResponse* New() const final {
    return CreateMaybeMessage<SetSettingResponse>(nullptr);
  }

  SetSettingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSettingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSettingResponse& from);
  void MergeFrom(const SetSettingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSettingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SetSettingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  bool has_camera_result() const;
  private:
  bool _internal_has_camera_result() const;
  public:
  void clear_camera_result();
  const ::mavsdk::rpc::camera::CameraResult& camera_result() const;
  ::mavsdk::rpc::camera::CameraResult* release_camera_result();
  ::mavsdk::rpc::camera::CameraResult* mutable_camera_result();
  void set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SetSettingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::CameraResult* camera_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraResult) */ {
 public:
  CameraResult();
  virtual ~CameraResult();

  CameraResult(const CameraResult& from);
  CameraResult(CameraResult&& from) noexcept
    : CameraResult() {
    *this = ::std::move(from);
  }

  inline CameraResult& operator=(const CameraResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraResult& operator=(CameraResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraResult* internal_default_instance() {
    return reinterpret_cast<const CameraResult*>(
               &_CameraResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CameraResult& a, CameraResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraResult* New() const final {
    return CreateMaybeMessage<CameraResult>(nullptr);
  }

  CameraResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraResult& from);
  void MergeFrom(const CameraResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraResult_Result Result;
  static constexpr Result UNKNOWN =
    CameraResult_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    CameraResult_Result_SUCCESS;
  static constexpr Result IN_PROGRESS =
    CameraResult_Result_IN_PROGRESS;
  static constexpr Result BUSY =
    CameraResult_Result_BUSY;
  static constexpr Result DENIED =
    CameraResult_Result_DENIED;
  static constexpr Result ERROR =
    CameraResult_Result_ERROR;
  static constexpr Result TIMEOUT =
    CameraResult_Result_TIMEOUT;
  static constexpr Result WRONG_ARGUMENT =
    CameraResult_Result_WRONG_ARGUMENT;
  static inline bool Result_IsValid(int value) {
    return CameraResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CameraResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CameraResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CameraResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CameraResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CameraResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return CameraResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.camera.CameraResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::camera::CameraResult_Result result() const;
  void set_result(::mavsdk::rpc::camera::CameraResult_Result value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CaptureInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CaptureInfo) */ {
 public:
  CaptureInfo();
  virtual ~CaptureInfo();

  CaptureInfo(const CaptureInfo& from);
  CaptureInfo(CaptureInfo&& from) noexcept
    : CaptureInfo() {
    *this = ::std::move(from);
  }

  inline CaptureInfo& operator=(const CaptureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfo& operator=(CaptureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptureInfo* internal_default_instance() {
    return reinterpret_cast<const CaptureInfo*>(
               &_CaptureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CaptureInfo& a, CaptureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptureInfo* New() const final {
    return CreateMaybeMessage<CaptureInfo>(nullptr);
  }

  CaptureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptureInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptureInfo& from);
  void MergeFrom(const CaptureInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CaptureInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileUrlFieldNumber = 7,
    kPositionFieldNumber = 1,
    kAttitudeQuaternionFieldNumber = 2,
    kAttitudeEulerAngleFieldNumber = 3,
    kTimeUtcUsFieldNumber = 4,
    kIsSuccessFieldNumber = 5,
    kIndexFieldNumber = 6,
  };
  // string file_url = 7;
  void clear_file_url();
  const std::string& file_url() const;
  void set_file_url(const std::string& value);
  void set_file_url(std::string&& value);
  void set_file_url(const char* value);
  void set_file_url(const char* value, size_t size);
  std::string* mutable_file_url();
  std::string* release_file_url();
  void set_allocated_file_url(std::string* file_url);
  private:
  const std::string& _internal_file_url() const;
  void _internal_set_file_url(const std::string& value);
  std::string* _internal_mutable_file_url();
  public:

  // .mavsdk.rpc.camera.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::camera::Position& position() const;
  ::mavsdk::rpc::camera::Position* release_position();
  ::mavsdk::rpc::camera::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::camera::Position* position);

  // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::camera::Quaternion& attitude_quaternion() const;
  ::mavsdk::rpc::camera::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::camera::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::camera::Quaternion* attitude_quaternion);

  // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
  bool has_attitude_euler_angle() const;
  private:
  bool _internal_has_attitude_euler_angle() const;
  public:
  void clear_attitude_euler_angle();
  const ::mavsdk::rpc::camera::EulerAngle& attitude_euler_angle() const;
  ::mavsdk::rpc::camera::EulerAngle* release_attitude_euler_angle();
  ::mavsdk::rpc::camera::EulerAngle* mutable_attitude_euler_angle();
  void set_allocated_attitude_euler_angle(::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle);

  // uint64 time_utc_us = 4;
  void clear_time_utc_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_utc_us() const;
  void set_time_utc_us(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool is_success = 5;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);

  // int32 index = 6;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CaptureInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_url_;
  ::mavsdk::rpc::camera::Position* position_;
  ::mavsdk::rpc::camera::Quaternion* attitude_quaternion_;
  ::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_utc_us_;
  bool is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  // float relative_altitude_m = 4;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.EulerAngle) */ {
 public:
  EulerAngle();
  virtual ~EulerAngle();

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EulerAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EulerAngle* New() const final {
    return CreateMaybeMessage<EulerAngle>(nullptr);
  }

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EulerAngle& from);
  void MergeFrom(const EulerAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.EulerAngle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.EulerAngle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_deg_;
  float pitch_deg_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamSettings) */ {
 public:
  VideoStreamSettings();
  virtual ~VideoStreamSettings();

  VideoStreamSettings(const VideoStreamSettings& from);
  VideoStreamSettings(VideoStreamSettings&& from) noexcept
    : VideoStreamSettings() {
    *this = ::std::move(from);
  }

  inline VideoStreamSettings& operator=(const VideoStreamSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamSettings& operator=(VideoStreamSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoStreamSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoStreamSettings* internal_default_instance() {
    return reinterpret_cast<const VideoStreamSettings*>(
               &_VideoStreamSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(VideoStreamSettings& a, VideoStreamSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoStreamSettings* New() const final {
    return CreateMaybeMessage<VideoStreamSettings>(nullptr);
  }

  VideoStreamSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoStreamSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoStreamSettings& from);
  void MergeFrom(const VideoStreamSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 6,
    kFrameRateHzFieldNumber = 1,
    kHorizontalResolutionPixFieldNumber = 2,
    kVerticalResolutionPixFieldNumber = 3,
    kBitRateBSFieldNumber = 4,
    kRotationDegFieldNumber = 5,
  };
  // string uri = 6;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // float frame_rate_hz = 1;
  void clear_frame_rate_hz();
  float frame_rate_hz() const;
  void set_frame_rate_hz(float value);

  // uint32 horizontal_resolution_pix = 2;
  void clear_horizontal_resolution_pix();
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontal_resolution_pix() const;
  void set_horizontal_resolution_pix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 vertical_resolution_pix = 3;
  void clear_vertical_resolution_pix();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_resolution_pix() const;
  void set_vertical_resolution_pix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 bit_rate_b_s = 4;
  void clear_bit_rate_b_s();
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_rate_b_s() const;
  void set_bit_rate_b_s(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 rotation_deg = 5;
  void clear_rotation_deg();
  ::PROTOBUF_NAMESPACE_ID::uint32 rotation_deg() const;
  void set_rotation_deg(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  float frame_rate_hz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontal_resolution_pix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_resolution_pix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_rate_b_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rotation_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.VideoStreamInfo) */ {
 public:
  VideoStreamInfo();
  virtual ~VideoStreamInfo();

  VideoStreamInfo(const VideoStreamInfo& from);
  VideoStreamInfo(VideoStreamInfo&& from) noexcept
    : VideoStreamInfo() {
    *this = ::std::move(from);
  }

  inline VideoStreamInfo& operator=(const VideoStreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamInfo& operator=(VideoStreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoStreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoStreamInfo* internal_default_instance() {
    return reinterpret_cast<const VideoStreamInfo*>(
               &_VideoStreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(VideoStreamInfo& a, VideoStreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoStreamInfo* New() const final {
    return CreateMaybeMessage<VideoStreamInfo>(nullptr);
  }

  VideoStreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoStreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoStreamInfo& from);
  void MergeFrom(const VideoStreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.VideoStreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VideoStreamInfo_VideoStreamStatus VideoStreamStatus;
  static constexpr VideoStreamStatus NOT_RUNNING =
    VideoStreamInfo_VideoStreamStatus_NOT_RUNNING;
  static constexpr VideoStreamStatus IN_PROGRESS =
    VideoStreamInfo_VideoStreamStatus_IN_PROGRESS;
  static inline bool VideoStreamStatus_IsValid(int value) {
    return VideoStreamInfo_VideoStreamStatus_IsValid(value);
  }
  static constexpr VideoStreamStatus VideoStreamStatus_MIN =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MIN;
  static constexpr VideoStreamStatus VideoStreamStatus_MAX =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_MAX;
  static constexpr int VideoStreamStatus_ARRAYSIZE =
    VideoStreamInfo_VideoStreamStatus_VideoStreamStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VideoStreamStatus_descriptor() {
    return VideoStreamInfo_VideoStreamStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VideoStreamStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VideoStreamStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VideoStreamStatus_Name.");
    return VideoStreamInfo_VideoStreamStatus_Name(enum_t_value);
  }
  static inline bool VideoStreamStatus_Parse(const std::string& name,
      VideoStreamStatus* value) {
    return VideoStreamInfo_VideoStreamStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVideoStreamSettingsFieldNumber = 1,
    kVideoStreamStatusFieldNumber = 2,
  };
  // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
  bool has_video_stream_settings() const;
  private:
  bool _internal_has_video_stream_settings() const;
  public:
  void clear_video_stream_settings();
  const ::mavsdk::rpc::camera::VideoStreamSettings& video_stream_settings() const;
  ::mavsdk::rpc::camera::VideoStreamSettings* release_video_stream_settings();
  ::mavsdk::rpc::camera::VideoStreamSettings* mutable_video_stream_settings();
  void set_allocated_video_stream_settings(::mavsdk::rpc::camera::VideoStreamSettings* video_stream_settings);

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
  void clear_video_stream_status();
  ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus video_stream_status() const;
  void set_video_stream_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.VideoStreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::camera::VideoStreamSettings* video_stream_settings_;
  int video_stream_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class CameraStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.CameraStatus) */ {
 public:
  CameraStatus();
  virtual ~CameraStatus();

  CameraStatus(const CameraStatus& from);
  CameraStatus(CameraStatus&& from) noexcept
    : CameraStatus() {
    *this = ::std::move(from);
  }

  inline CameraStatus& operator=(const CameraStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraStatus& operator=(CameraStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraStatus* internal_default_instance() {
    return reinterpret_cast<const CameraStatus*>(
               &_CameraStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CameraStatus& a, CameraStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraStatus* New() const final {
    return CreateMaybeMessage<CameraStatus>(nullptr);
  }

  CameraStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraStatus& from);
  void MergeFrom(const CameraStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.CameraStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraStatus_StorageStatus StorageStatus;
  static constexpr StorageStatus NOT_AVAILABLE =
    CameraStatus_StorageStatus_NOT_AVAILABLE;
  static constexpr StorageStatus UNFORMATTED =
    CameraStatus_StorageStatus_UNFORMATTED;
  static constexpr StorageStatus FORMATTED =
    CameraStatus_StorageStatus_FORMATTED;
  static inline bool StorageStatus_IsValid(int value) {
    return CameraStatus_StorageStatus_IsValid(value);
  }
  static constexpr StorageStatus StorageStatus_MIN =
    CameraStatus_StorageStatus_StorageStatus_MIN;
  static constexpr StorageStatus StorageStatus_MAX =
    CameraStatus_StorageStatus_StorageStatus_MAX;
  static constexpr int StorageStatus_ARRAYSIZE =
    CameraStatus_StorageStatus_StorageStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageStatus_descriptor() {
    return CameraStatus_StorageStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageStatus_Name.");
    return CameraStatus_StorageStatus_Name(enum_t_value);
  }
  static inline bool StorageStatus_Parse(const std::string& name,
      StorageStatus* value) {
    return CameraStatus_StorageStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMediaFolderNameFieldNumber = 7,
    kVideoOnFieldNumber = 1,
    kPhotoIntervalOnFieldNumber = 2,
    kUsedStorageMibFieldNumber = 3,
    kAvailableStorageMibFieldNumber = 4,
    kTotalStorageMibFieldNumber = 5,
    kRecordingTimeSFieldNumber = 6,
    kStorageStatusFieldNumber = 8,
  };
  // string media_folder_name = 7;
  void clear_media_folder_name();
  const std::string& media_folder_name() const;
  void set_media_folder_name(const std::string& value);
  void set_media_folder_name(std::string&& value);
  void set_media_folder_name(const char* value);
  void set_media_folder_name(const char* value, size_t size);
  std::string* mutable_media_folder_name();
  std::string* release_media_folder_name();
  void set_allocated_media_folder_name(std::string* media_folder_name);
  private:
  const std::string& _internal_media_folder_name() const;
  void _internal_set_media_folder_name(const std::string& value);
  std::string* _internal_mutable_media_folder_name();
  public:

  // bool video_on = 1;
  void clear_video_on();
  bool video_on() const;
  void set_video_on(bool value);

  // bool photo_interval_on = 2;
  void clear_photo_interval_on();
  bool photo_interval_on() const;
  void set_photo_interval_on(bool value);

  // float used_storage_mib = 3;
  void clear_used_storage_mib();
  float used_storage_mib() const;
  void set_used_storage_mib(float value);

  // float available_storage_mib = 4;
  void clear_available_storage_mib();
  float available_storage_mib() const;
  void set_available_storage_mib(float value);

  // float total_storage_mib = 5;
  void clear_total_storage_mib();
  float total_storage_mib() const;
  void set_total_storage_mib(float value);

  // float recording_time_s = 6;
  void clear_recording_time_s();
  float recording_time_s() const;
  void set_recording_time_s(float value);

  // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
  void clear_storage_status();
  ::mavsdk::rpc::camera::CameraStatus_StorageStatus storage_status() const;
  void set_storage_status(::mavsdk::rpc::camera::CameraStatus_StorageStatus value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.CameraStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_folder_name_;
  bool video_on_;
  bool photo_interval_on_;
  float used_storage_mib_;
  float available_storage_mib_;
  float total_storage_mib_;
  float recording_time_s_;
  int storage_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Setting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting& operator=(Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Setting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Setting* New() const final {
    return CreateMaybeMessage<Setting>(nullptr);
  }

  Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Setting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Setting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingIdFieldNumber = 1,
    kSettingDescriptionFieldNumber = 2,
    kOptionFieldNumber = 3,
  };
  // string setting_id = 1;
  void clear_setting_id();
  const std::string& setting_id() const;
  void set_setting_id(const std::string& value);
  void set_setting_id(std::string&& value);
  void set_setting_id(const char* value);
  void set_setting_id(const char* value, size_t size);
  std::string* mutable_setting_id();
  std::string* release_setting_id();
  void set_allocated_setting_id(std::string* setting_id);
  private:
  const std::string& _internal_setting_id() const;
  void _internal_set_setting_id(const std::string& value);
  std::string* _internal_mutable_setting_id();
  public:

  // string setting_description = 2;
  void clear_setting_description();
  const std::string& setting_description() const;
  void set_setting_description(const std::string& value);
  void set_setting_description(std::string&& value);
  void set_setting_description(const char* value);
  void set_setting_description(const char* value, size_t size);
  std::string* mutable_setting_description();
  std::string* release_setting_description();
  void set_allocated_setting_description(std::string* setting_description);
  private:
  const std::string& _internal_setting_description() const;
  void _internal_set_setting_description(const std::string& value);
  std::string* _internal_mutable_setting_description();
  public:

  // .mavsdk.rpc.camera.Option option = 3;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const ::mavsdk::rpc::camera::Option& option() const;
  ::mavsdk::rpc::camera::Option* release_option();
  ::mavsdk::rpc::camera::Option* mutable_option();
  void set_allocated_option(::mavsdk::rpc::camera::Option* option);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Setting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_description_;
  ::mavsdk::rpc::camera::Option* option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Option :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.Option) */ {
 public:
  Option();
  virtual ~Option();

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return CreateMaybeMessage<Option>(nullptr);
  }

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.Option";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionIdFieldNumber = 1,
    kOptionDescriptionFieldNumber = 2,
  };
  // string option_id = 1;
  void clear_option_id();
  const std::string& option_id() const;
  void set_option_id(const std::string& value);
  void set_option_id(std::string&& value);
  void set_option_id(const char* value);
  void set_option_id(const char* value, size_t size);
  std::string* mutable_option_id();
  std::string* release_option_id();
  void set_allocated_option_id(std::string* option_id);
  private:
  const std::string& _internal_option_id() const;
  void _internal_set_option_id(const std::string& value);
  std::string* _internal_mutable_option_id();
  public:

  // string option_description = 2;
  void clear_option_description();
  const std::string& option_description() const;
  void set_option_description(const std::string& value);
  void set_option_description(std::string&& value);
  void set_option_description(const char* value);
  void set_option_description(const char* value, size_t size);
  std::string* mutable_option_description();
  std::string* release_option_description();
  void set_allocated_option_description(std::string* option_description);
  private:
  const std::string& _internal_option_description() const;
  void _internal_set_option_description(const std::string& value);
  std::string* _internal_mutable_option_description();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.Option)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class SettingOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera.SettingOptions) */ {
 public:
  SettingOptions();
  virtual ~SettingOptions();

  SettingOptions(const SettingOptions& from);
  SettingOptions(SettingOptions&& from) noexcept
    : SettingOptions() {
    *this = ::std::move(from);
  }

  inline SettingOptions& operator=(const SettingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingOptions& operator=(SettingOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettingOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingOptions* internal_default_instance() {
    return reinterpret_cast<const SettingOptions*>(
               &_SettingOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SettingOptions& a, SettingOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingOptions* New() const final {
    return CreateMaybeMessage<SettingOptions>(nullptr);
  }

  SettingOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettingOptions& from);
  void MergeFrom(const SettingOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.camera.SettingOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_camera_2fcamera_2eproto);
    return ::descriptor_table_camera_2fcamera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 3,
    kSettingIdFieldNumber = 1,
    kSettingDescriptionFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.camera.Option options = 3;
  int options_size() const;
  void clear_options();
  ::mavsdk::rpc::camera::Option* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >*
      mutable_options();
  const ::mavsdk::rpc::camera::Option& options(int index) const;
  ::mavsdk::rpc::camera::Option* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >&
      options() const;

  // string setting_id = 1;
  void clear_setting_id();
  const std::string& setting_id() const;
  void set_setting_id(const std::string& value);
  void set_setting_id(std::string&& value);
  void set_setting_id(const char* value);
  void set_setting_id(const char* value, size_t size);
  std::string* mutable_setting_id();
  std::string* release_setting_id();
  void set_allocated_setting_id(std::string* setting_id);
  private:
  const std::string& _internal_setting_id() const;
  void _internal_set_setting_id(const std::string& value);
  std::string* _internal_mutable_setting_id();
  public:

  // string setting_description = 2;
  void clear_setting_description();
  const std::string& setting_description() const;
  void set_setting_description(const std::string& value);
  void set_setting_description(std::string&& value);
  void set_setting_description(const char* value);
  void set_setting_description(const char* value, size_t size);
  std::string* mutable_setting_description();
  std::string* release_setting_description();
  void set_allocated_setting_description(std::string* setting_description);
  private:
  const std::string& _internal_setting_description() const;
  void _internal_set_setting_description(const std::string& value);
  std::string* _internal_mutable_setting_description();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera.SettingOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_camera_2fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TakePhotoRequest

// -------------------------------------------------------------------

// TakePhotoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool TakePhotoResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void TakePhotoResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& TakePhotoResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* TakePhotoResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
  return camera_result_;
}
inline void TakePhotoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.TakePhotoResponse.camera_result)
}

// -------------------------------------------------------------------

// StartPhotoIntervalRequest

// float interval_s = 1;
inline void StartPhotoIntervalRequest::clear_interval_s() {
  interval_s_ = 0;
}
inline float StartPhotoIntervalRequest::interval_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartPhotoIntervalRequest.interval_s)
  return interval_s_;
}
inline void StartPhotoIntervalRequest::set_interval_s(float value) {
  
  interval_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.StartPhotoIntervalRequest.interval_s)
}

// -------------------------------------------------------------------

// StartPhotoIntervalResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartPhotoIntervalResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StartPhotoIntervalResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartPhotoIntervalResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartPhotoIntervalResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
  return camera_result_;
}
inline void StartPhotoIntervalResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result)
}

// -------------------------------------------------------------------

// StopPhotoIntervalRequest

// -------------------------------------------------------------------

// StopPhotoIntervalResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopPhotoIntervalResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StopPhotoIntervalResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopPhotoIntervalResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopPhotoIntervalResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
  return camera_result_;
}
inline void StopPhotoIntervalResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result)
}

// -------------------------------------------------------------------

// StartVideoRequest

// -------------------------------------------------------------------

// StartVideoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartVideoResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StartVideoResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartVideoResponse.camera_result)
  return camera_result_;
}
inline void StartVideoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartVideoResponse.camera_result)
}

// -------------------------------------------------------------------

// StopVideoRequest

// -------------------------------------------------------------------

// StopVideoResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopVideoResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StopVideoResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopVideoResponse.camera_result)
  return camera_result_;
}
inline void StopVideoResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopVideoResponse.camera_result)
}

// -------------------------------------------------------------------

// StartVideoStreamingRequest

// -------------------------------------------------------------------

// StartVideoStreamingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StartVideoStreamingResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StartVideoStreamingResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StartVideoStreamingResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StartVideoStreamingResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
  return camera_result_;
}
inline void StartVideoStreamingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result)
}

// -------------------------------------------------------------------

// StopVideoStreamingRequest

// -------------------------------------------------------------------

// StopVideoStreamingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool StopVideoStreamingResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void StopVideoStreamingResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& StopVideoStreamingResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* StopVideoStreamingResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
  return camera_result_;
}
inline void StopVideoStreamingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result)
}

// -------------------------------------------------------------------

// SetModeRequest

// .mavsdk.rpc.camera.CameraMode camera_mode = 1;
inline void SetModeRequest::clear_camera_mode() {
  camera_mode_ = 0;
}
inline ::mavsdk::rpc::camera::CameraMode SetModeRequest::camera_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetModeRequest.camera_mode)
  return static_cast< ::mavsdk::rpc::camera::CameraMode >(camera_mode_);
}
inline void SetModeRequest::set_camera_mode(::mavsdk::rpc::camera::CameraMode value) {
  
  camera_mode_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SetModeRequest.camera_mode)
}

// -------------------------------------------------------------------

// SetModeResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool SetModeResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void SetModeResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& SetModeResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetModeResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetModeResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetModeResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetModeResponse.camera_result)
  return camera_result_;
}
inline void SetModeResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetModeResponse.camera_result)
}

// -------------------------------------------------------------------

// SubscribeModeRequest

// -------------------------------------------------------------------

// ModeResponse

// .mavsdk.rpc.camera.CameraMode camera_mode = 1;
inline void ModeResponse::clear_camera_mode() {
  camera_mode_ = 0;
}
inline ::mavsdk::rpc::camera::CameraMode ModeResponse::camera_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.ModeResponse.camera_mode)
  return static_cast< ::mavsdk::rpc::camera::CameraMode >(camera_mode_);
}
inline void ModeResponse::set_camera_mode(::mavsdk::rpc::camera::CameraMode value) {
  
  camera_mode_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.ModeResponse.camera_mode)
}

// -------------------------------------------------------------------

// SubscribeVideoStreamInfoRequest

// -------------------------------------------------------------------

// VideoStreamInfoResponse

// .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
inline bool VideoStreamInfoResponse::has_video_stream_info() const {
  return this != internal_default_instance() && video_stream_info_ != nullptr;
}
inline void VideoStreamInfoResponse::clear_video_stream_info() {
  if (GetArenaNoVirtual() == nullptr && video_stream_info_ != nullptr) {
    delete video_stream_info_;
  }
  video_stream_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamInfo& VideoStreamInfoResponse::video_stream_info() const {
  const ::mavsdk::rpc::camera::VideoStreamInfo* p = video_stream_info_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfoResponse.video_stream_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamInfo*>(
      &::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_);
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamInfoResponse::release_video_stream_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamInfoResponse.video_stream_info)
  
  ::mavsdk::rpc::camera::VideoStreamInfo* temp = video_stream_info_;
  video_stream_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo* VideoStreamInfoResponse::mutable_video_stream_info() {
  
  if (video_stream_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamInfo>(GetArenaNoVirtual());
    video_stream_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamInfoResponse.video_stream_info)
  return video_stream_info_;
}
inline void VideoStreamInfoResponse::set_allocated_video_stream_info(::mavsdk::rpc::camera::VideoStreamInfo* video_stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete video_stream_info_;
  }
  if (video_stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video_stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_info, submessage_arena);
    }
    
  } else {
    
  }
  video_stream_info_ = video_stream_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamInfoResponse.video_stream_info)
}

// -------------------------------------------------------------------

// SubscribeCaptureInfoRequest

// -------------------------------------------------------------------

// CaptureInfoResponse

// .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
inline bool CaptureInfoResponse::has_capture_info() const {
  return this != internal_default_instance() && capture_info_ != nullptr;
}
inline void CaptureInfoResponse::clear_capture_info() {
  if (GetArenaNoVirtual() == nullptr && capture_info_ != nullptr) {
    delete capture_info_;
  }
  capture_info_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CaptureInfo& CaptureInfoResponse::capture_info() const {
  const ::mavsdk::rpc::camera::CaptureInfo* p = capture_info_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CaptureInfo*>(
      &::mavsdk::rpc::camera::_CaptureInfo_default_instance_);
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::release_capture_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  
  ::mavsdk::rpc::camera::CaptureInfo* temp = capture_info_;
  capture_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CaptureInfo* CaptureInfoResponse::mutable_capture_info() {
  
  if (capture_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CaptureInfo>(GetArenaNoVirtual());
    capture_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
  return capture_info_;
}
inline void CaptureInfoResponse::set_allocated_capture_info(::mavsdk::rpc::camera::CaptureInfo* capture_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capture_info_;
  }
  if (capture_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capture_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_info, submessage_arena);
    }
    
  } else {
    
  }
  capture_info_ = capture_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfoResponse.capture_info)
}

// -------------------------------------------------------------------

// SubscribeCameraStatusRequest

// -------------------------------------------------------------------

// CameraStatusResponse

// .mavsdk.rpc.camera.CameraStatus camera_status = 1;
inline bool CameraStatusResponse::has_camera_status() const {
  return this != internal_default_instance() && camera_status_ != nullptr;
}
inline void CameraStatusResponse::clear_camera_status() {
  if (GetArenaNoVirtual() == nullptr && camera_status_ != nullptr) {
    delete camera_status_;
  }
  camera_status_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraStatus& CameraStatusResponse::camera_status() const {
  const ::mavsdk::rpc::camera::CameraStatus* p = camera_status_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatusResponse.camera_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraStatus*>(
      &::mavsdk::rpc::camera::_CameraStatus_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraStatus* CameraStatusResponse::release_camera_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CameraStatusResponse.camera_status)
  
  ::mavsdk::rpc::camera::CameraStatus* temp = camera_status_;
  camera_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraStatus* CameraStatusResponse::mutable_camera_status() {
  
  if (camera_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraStatus>(GetArenaNoVirtual());
    camera_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraStatusResponse.camera_status)
  return camera_status_;
}
inline void CameraStatusResponse::set_allocated_camera_status(::mavsdk::rpc::camera::CameraStatus* camera_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_status_;
  }
  if (camera_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_status, submessage_arena);
    }
    
  } else {
    
  }
  camera_status_ = camera_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CameraStatusResponse.camera_status)
}

// -------------------------------------------------------------------

// SubscribeCurrentSettingsRequest

// -------------------------------------------------------------------

// CurrentSettingsResponse

// repeated .mavsdk.rpc.camera.Setting current_settings = 1;
inline int CurrentSettingsResponse::current_settings_size() const {
  return current_settings_.size();
}
inline void CurrentSettingsResponse::clear_current_settings() {
  current_settings_.Clear();
}
inline ::mavsdk::rpc::camera::Setting* CurrentSettingsResponse::mutable_current_settings(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CurrentSettingsResponse.current_settings)
  return current_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >*
CurrentSettingsResponse::mutable_current_settings() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.CurrentSettingsResponse.current_settings)
  return &current_settings_;
}
inline const ::mavsdk::rpc::camera::Setting& CurrentSettingsResponse::current_settings(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CurrentSettingsResponse.current_settings)
  return current_settings_.Get(index);
}
inline ::mavsdk::rpc::camera::Setting* CurrentSettingsResponse::add_current_settings() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.CurrentSettingsResponse.current_settings)
  return current_settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Setting >&
CurrentSettingsResponse::current_settings() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.CurrentSettingsResponse.current_settings)
  return current_settings_;
}

// -------------------------------------------------------------------

// SubscribePossibleSettingOptionsRequest

// -------------------------------------------------------------------

// PossibleSettingOptionsResponse

// repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
inline int PossibleSettingOptionsResponse::setting_options_size() const {
  return setting_options_.size();
}
inline void PossibleSettingOptionsResponse::clear_setting_options() {
  setting_options_.Clear();
}
inline ::mavsdk::rpc::camera::SettingOptions* PossibleSettingOptionsResponse::mutable_setting_options(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options)
  return setting_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >*
PossibleSettingOptionsResponse::mutable_setting_options() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options)
  return &setting_options_;
}
inline const ::mavsdk::rpc::camera::SettingOptions& PossibleSettingOptionsResponse::setting_options(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options)
  return setting_options_.Get(index);
}
inline ::mavsdk::rpc::camera::SettingOptions* PossibleSettingOptionsResponse::add_setting_options() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options)
  return setting_options_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::SettingOptions >&
PossibleSettingOptionsResponse::setting_options() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options)
  return setting_options_;
}

// -------------------------------------------------------------------

// SetSettingRequest

// .mavsdk.rpc.camera.Setting setting = 1;
inline bool SetSettingRequest::has_setting() const {
  return this != internal_default_instance() && setting_ != nullptr;
}
inline void SetSettingRequest::clear_setting() {
  if (GetArenaNoVirtual() == nullptr && setting_ != nullptr) {
    delete setting_;
  }
  setting_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Setting& SetSettingRequest::setting() const {
  const ::mavsdk::rpc::camera::Setting* p = setting_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetSettingRequest.setting)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::Setting*>(
      &::mavsdk::rpc::camera::_Setting_default_instance_);
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::release_setting() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetSettingRequest.setting)
  
  ::mavsdk::rpc::camera::Setting* temp = setting_;
  setting_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Setting* SetSettingRequest::mutable_setting() {
  
  if (setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Setting>(GetArenaNoVirtual());
    setting_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetSettingRequest.setting)
  return setting_;
}
inline void SetSettingRequest::set_allocated_setting(::mavsdk::rpc::camera::Setting* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    
  } else {
    
  }
  setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetSettingRequest.setting)
}

// -------------------------------------------------------------------

// SetSettingResponse

// .mavsdk.rpc.camera.CameraResult camera_result = 1;
inline bool SetSettingResponse::has_camera_result() const {
  return this != internal_default_instance() && camera_result_ != nullptr;
}
inline void SetSettingResponse::clear_camera_result() {
  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
}
inline const ::mavsdk::rpc::camera::CameraResult& SetSettingResponse::camera_result() const {
  const ::mavsdk::rpc::camera::CameraResult* p = camera_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::CameraResult*>(
      &::mavsdk::rpc::camera::_CameraResult_default_instance_);
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::release_camera_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  
  ::mavsdk::rpc::camera::CameraResult* temp = camera_result_;
  camera_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::CameraResult* SetSettingResponse::mutable_camera_result() {
  
  if (camera_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::CameraResult>(GetArenaNoVirtual());
    camera_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SetSettingResponse.camera_result)
  return camera_result_;
}
inline void SetSettingResponse::set_allocated_camera_result(::mavsdk::rpc::camera::CameraResult* camera_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_result_;
  }
  if (camera_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_result, submessage_arena);
    }
    
  } else {
    
  }
  camera_result_ = camera_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SetSettingResponse.camera_result)
}

// -------------------------------------------------------------------

// CameraResult

// .mavsdk.rpc.camera.CameraResult.Result result = 1;
inline void CameraResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::camera::CameraResult_Result CameraResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraResult.result)
  return static_cast< ::mavsdk::rpc::camera::CameraResult_Result >(result_);
}
inline void CameraResult::set_result(::mavsdk::rpc::camera::CameraResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraResult.result)
}

// string result_str = 2;
inline void CameraResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraResult.result_str)
  return _internal_result_str();
}
inline void CameraResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraResult.result_str)
}
inline std::string* CameraResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& CameraResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void CameraResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.CameraResult.result_str)
}
inline void CameraResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.CameraResult.result_str)
}
inline void CameraResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.CameraResult.result_str)
}
inline std::string* CameraResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CameraResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CameraResult.result_str)
}

// -------------------------------------------------------------------

// CaptureInfo

// .mavsdk.rpc.camera.Position position = 1;
inline bool CaptureInfo::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void CaptureInfo::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Position& CaptureInfo::position() const {
  const ::mavsdk::rpc::camera::Position* p = position_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::Position*>(
      &::mavsdk::rpc::camera::_Position_default_instance_);
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.position)
  
  ::mavsdk::rpc::camera::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Position* CaptureInfo::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.position)
  return position_;
}
inline void CaptureInfo::set_allocated_position(::mavsdk::rpc::camera::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.position)
}

// .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
inline bool CaptureInfo::has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline void CaptureInfo::clear_attitude_quaternion() {
  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Quaternion& CaptureInfo::attitude_quaternion() const {
  const ::mavsdk::rpc::camera::Quaternion* p = attitude_quaternion_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::Quaternion*>(
      &::mavsdk::rpc::camera::_Quaternion_default_instance_);
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  
  ::mavsdk::rpc::camera::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Quaternion* CaptureInfo::mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Quaternion>(GetArenaNoVirtual());
    attitude_quaternion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
  return attitude_quaternion_;
}
inline void CaptureInfo::set_allocated_attitude_quaternion(::mavsdk::rpc::camera::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_quaternion)
}

// .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
inline bool CaptureInfo::has_attitude_euler_angle() const {
  return this != internal_default_instance() && attitude_euler_angle_ != nullptr;
}
inline void CaptureInfo::clear_attitude_euler_angle() {
  if (GetArenaNoVirtual() == nullptr && attitude_euler_angle_ != nullptr) {
    delete attitude_euler_angle_;
  }
  attitude_euler_angle_ = nullptr;
}
inline const ::mavsdk::rpc::camera::EulerAngle& CaptureInfo::attitude_euler_angle() const {
  const ::mavsdk::rpc::camera::EulerAngle* p = attitude_euler_angle_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::EulerAngle*>(
      &::mavsdk::rpc::camera::_EulerAngle_default_instance_);
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::release_attitude_euler_angle() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  
  ::mavsdk::rpc::camera::EulerAngle* temp = attitude_euler_angle_;
  attitude_euler_angle_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::EulerAngle* CaptureInfo::mutable_attitude_euler_angle() {
  
  if (attitude_euler_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::EulerAngle>(GetArenaNoVirtual());
    attitude_euler_angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
  return attitude_euler_angle_;
}
inline void CaptureInfo::set_allocated_attitude_euler_angle(::mavsdk::rpc::camera::EulerAngle* attitude_euler_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_euler_angle_;
  }
  if (attitude_euler_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_euler_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler_angle, submessage_arena);
    }
    
  } else {
    
  }
  attitude_euler_angle_ = attitude_euler_angle;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle)
}

// uint64 time_utc_us = 4;
inline void CaptureInfo::clear_time_utc_us() {
  time_utc_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CaptureInfo::time_utc_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.time_utc_us)
  return time_utc_us_;
}
inline void CaptureInfo::set_time_utc_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_utc_us_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.time_utc_us)
}

// bool is_success = 5;
inline void CaptureInfo::clear_is_success() {
  is_success_ = false;
}
inline bool CaptureInfo::is_success() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.is_success)
  return is_success_;
}
inline void CaptureInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.is_success)
}

// int32 index = 6;
inline void CaptureInfo::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CaptureInfo::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.index)
  return index_;
}
inline void CaptureInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.index)
}

// string file_url = 7;
inline void CaptureInfo::clear_file_url() {
  file_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CaptureInfo::file_url() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CaptureInfo.file_url)
  return _internal_file_url();
}
inline void CaptureInfo::set_file_url(const std::string& value) {
  _internal_set_file_url(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CaptureInfo.file_url)
}
inline std::string* CaptureInfo::mutable_file_url() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CaptureInfo.file_url)
  return _internal_mutable_file_url();
}
inline const std::string& CaptureInfo::_internal_file_url() const {
  return file_url_.GetNoArena();
}
inline void CaptureInfo::_internal_set_file_url(const std::string& value) {
  
  file_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CaptureInfo::set_file_url(std::string&& value) {
  
  file_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.CaptureInfo.file_url)
}
inline void CaptureInfo::set_file_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.CaptureInfo.file_url)
}
inline void CaptureInfo::set_file_url(const char* value, size_t size) {
  
  file_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.CaptureInfo.file_url)
}
inline std::string* CaptureInfo::_internal_mutable_file_url() {
  
  return file_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CaptureInfo::release_file_url() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CaptureInfo.file_url)
  
  return file_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureInfo::set_allocated_file_url(std::string* file_url) {
  if (file_url != nullptr) {
    
  } else {
    
  }
  file_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_url);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CaptureInfo.file_url)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1;
inline void Position::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.latitude_deg)
  return latitude_deg_;
}
inline void Position::set_latitude_deg(double value) {
  
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.latitude_deg)
}

// double longitude_deg = 2;
inline void Position::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.longitude_deg)
  return longitude_deg_;
}
inline void Position::set_longitude_deg(double value) {
  
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void Position::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.absolute_altitude_m)
  return absolute_altitude_m_;
}
inline void Position::set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4;
inline void Position::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Position.relative_altitude_m)
  return relative_altitude_m_;
}
inline void Position::set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Quaternion.z)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1;
inline void EulerAngle::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.roll_deg)
  return roll_deg_;
}
inline void EulerAngle::set_roll_deg(float value) {
  
  roll_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.roll_deg)
}

// float pitch_deg = 2;
inline void EulerAngle::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.pitch_deg)
  return pitch_deg_;
}
inline void EulerAngle::set_pitch_deg(float value) {
  
  pitch_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.pitch_deg)
}

// float yaw_deg = 3;
inline void EulerAngle::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.EulerAngle.yaw_deg)
  return yaw_deg_;
}
inline void EulerAngle::set_yaw_deg(float value) {
  
  yaw_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.EulerAngle.yaw_deg)
}

// -------------------------------------------------------------------

// VideoStreamSettings

// float frame_rate_hz = 1;
inline void VideoStreamSettings::clear_frame_rate_hz() {
  frame_rate_hz_ = 0;
}
inline float VideoStreamSettings::frame_rate_hz() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.frame_rate_hz)
  return frame_rate_hz_;
}
inline void VideoStreamSettings::set_frame_rate_hz(float value) {
  
  frame_rate_hz_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.frame_rate_hz)
}

// uint32 horizontal_resolution_pix = 2;
inline void VideoStreamSettings::clear_horizontal_resolution_pix() {
  horizontal_resolution_pix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamSettings::horizontal_resolution_pix() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.horizontal_resolution_pix)
  return horizontal_resolution_pix_;
}
inline void VideoStreamSettings::set_horizontal_resolution_pix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  horizontal_resolution_pix_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.horizontal_resolution_pix)
}

// uint32 vertical_resolution_pix = 3;
inline void VideoStreamSettings::clear_vertical_resolution_pix() {
  vertical_resolution_pix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamSettings::vertical_resolution_pix() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.vertical_resolution_pix)
  return vertical_resolution_pix_;
}
inline void VideoStreamSettings::set_vertical_resolution_pix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vertical_resolution_pix_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.vertical_resolution_pix)
}

// uint32 bit_rate_b_s = 4;
inline void VideoStreamSettings::clear_bit_rate_b_s() {
  bit_rate_b_s_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamSettings::bit_rate_b_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.bit_rate_b_s)
  return bit_rate_b_s_;
}
inline void VideoStreamSettings::set_bit_rate_b_s(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bit_rate_b_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.bit_rate_b_s)
}

// uint32 rotation_deg = 5;
inline void VideoStreamSettings::clear_rotation_deg() {
  rotation_deg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamSettings::rotation_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.rotation_deg)
  return rotation_deg_;
}
inline void VideoStreamSettings::set_rotation_deg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rotation_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.rotation_deg)
}

// string uri = 6;
inline void VideoStreamSettings::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VideoStreamSettings::uri() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamSettings.uri)
  return _internal_uri();
}
inline void VideoStreamSettings::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamSettings.uri)
}
inline std::string* VideoStreamSettings::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamSettings.uri)
  return _internal_mutable_uri();
}
inline const std::string& VideoStreamSettings::_internal_uri() const {
  return uri_.GetNoArena();
}
inline void VideoStreamSettings::_internal_set_uri(const std::string& value) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VideoStreamSettings::set_uri(std::string&& value) {
  
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.VideoStreamSettings.uri)
}
inline void VideoStreamSettings::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.VideoStreamSettings.uri)
}
inline void VideoStreamSettings::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.VideoStreamSettings.uri)
}
inline std::string* VideoStreamSettings::_internal_mutable_uri() {
  
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VideoStreamSettings::release_uri() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamSettings.uri)
  
  return uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VideoStreamSettings::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamSettings.uri)
}

// -------------------------------------------------------------------

// VideoStreamInfo

// .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
inline bool VideoStreamInfo::has_video_stream_settings() const {
  return this != internal_default_instance() && video_stream_settings_ != nullptr;
}
inline void VideoStreamInfo::clear_video_stream_settings() {
  if (GetArenaNoVirtual() == nullptr && video_stream_settings_ != nullptr) {
    delete video_stream_settings_;
  }
  video_stream_settings_ = nullptr;
}
inline const ::mavsdk::rpc::camera::VideoStreamSettings& VideoStreamInfo::video_stream_settings() const {
  const ::mavsdk::rpc::camera::VideoStreamSettings* p = video_stream_settings_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.video_stream_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::VideoStreamSettings*>(
      &::mavsdk::rpc::camera::_VideoStreamSettings_default_instance_);
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::release_video_stream_settings() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.VideoStreamInfo.video_stream_settings)
  
  ::mavsdk::rpc::camera::VideoStreamSettings* temp = video_stream_settings_;
  video_stream_settings_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::VideoStreamSettings* VideoStreamInfo::mutable_video_stream_settings() {
  
  if (video_stream_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::VideoStreamSettings>(GetArenaNoVirtual());
    video_stream_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.VideoStreamInfo.video_stream_settings)
  return video_stream_settings_;
}
inline void VideoStreamInfo::set_allocated_video_stream_settings(::mavsdk::rpc::camera::VideoStreamSettings* video_stream_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete video_stream_settings_;
  }
  if (video_stream_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video_stream_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_stream_settings, submessage_arena);
    }
    
  } else {
    
  }
  video_stream_settings_ = video_stream_settings;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.VideoStreamInfo.video_stream_settings)
}

// .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
inline void VideoStreamInfo::clear_video_stream_status() {
  video_stream_status_ = 0;
}
inline ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus VideoStreamInfo::video_stream_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.VideoStreamInfo.video_stream_status)
  return static_cast< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus >(video_stream_status_);
}
inline void VideoStreamInfo::set_video_stream_status(::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus value) {
  
  video_stream_status_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.VideoStreamInfo.video_stream_status)
}

// -------------------------------------------------------------------

// CameraStatus

// bool video_on = 1;
inline void CameraStatus::clear_video_on() {
  video_on_ = false;
}
inline bool CameraStatus::video_on() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.video_on)
  return video_on_;
}
inline void CameraStatus::set_video_on(bool value) {
  
  video_on_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.video_on)
}

// bool photo_interval_on = 2;
inline void CameraStatus::clear_photo_interval_on() {
  photo_interval_on_ = false;
}
inline bool CameraStatus::photo_interval_on() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.photo_interval_on)
  return photo_interval_on_;
}
inline void CameraStatus::set_photo_interval_on(bool value) {
  
  photo_interval_on_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.photo_interval_on)
}

// float used_storage_mib = 3;
inline void CameraStatus::clear_used_storage_mib() {
  used_storage_mib_ = 0;
}
inline float CameraStatus::used_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.used_storage_mib)
  return used_storage_mib_;
}
inline void CameraStatus::set_used_storage_mib(float value) {
  
  used_storage_mib_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.used_storage_mib)
}

// float available_storage_mib = 4;
inline void CameraStatus::clear_available_storage_mib() {
  available_storage_mib_ = 0;
}
inline float CameraStatus::available_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.available_storage_mib)
  return available_storage_mib_;
}
inline void CameraStatus::set_available_storage_mib(float value) {
  
  available_storage_mib_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.available_storage_mib)
}

// float total_storage_mib = 5;
inline void CameraStatus::clear_total_storage_mib() {
  total_storage_mib_ = 0;
}
inline float CameraStatus::total_storage_mib() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.total_storage_mib)
  return total_storage_mib_;
}
inline void CameraStatus::set_total_storage_mib(float value) {
  
  total_storage_mib_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.total_storage_mib)
}

// float recording_time_s = 6;
inline void CameraStatus::clear_recording_time_s() {
  recording_time_s_ = 0;
}
inline float CameraStatus::recording_time_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.recording_time_s)
  return recording_time_s_;
}
inline void CameraStatus::set_recording_time_s(float value) {
  
  recording_time_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.recording_time_s)
}

// string media_folder_name = 7;
inline void CameraStatus::clear_media_folder_name() {
  media_folder_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CameraStatus::media_folder_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.media_folder_name)
  return _internal_media_folder_name();
}
inline void CameraStatus::set_media_folder_name(const std::string& value) {
  _internal_set_media_folder_name(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.media_folder_name)
}
inline std::string* CameraStatus::mutable_media_folder_name() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.CameraStatus.media_folder_name)
  return _internal_mutable_media_folder_name();
}
inline const std::string& CameraStatus::_internal_media_folder_name() const {
  return media_folder_name_.GetNoArena();
}
inline void CameraStatus::_internal_set_media_folder_name(const std::string& value) {
  
  media_folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraStatus::set_media_folder_name(std::string&& value) {
  
  media_folder_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.CameraStatus.media_folder_name)
}
inline void CameraStatus::set_media_folder_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.CameraStatus.media_folder_name)
}
inline void CameraStatus::set_media_folder_name(const char* value, size_t size) {
  
  media_folder_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.CameraStatus.media_folder_name)
}
inline std::string* CameraStatus::_internal_mutable_media_folder_name() {
  
  return media_folder_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraStatus::release_media_folder_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.CameraStatus.media_folder_name)
  
  return media_folder_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraStatus::set_allocated_media_folder_name(std::string* media_folder_name) {
  if (media_folder_name != nullptr) {
    
  } else {
    
  }
  media_folder_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_folder_name);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.CameraStatus.media_folder_name)
}

// .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
inline void CameraStatus::clear_storage_status() {
  storage_status_ = 0;
}
inline ::mavsdk::rpc::camera::CameraStatus_StorageStatus CameraStatus::storage_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.CameraStatus.storage_status)
  return static_cast< ::mavsdk::rpc::camera::CameraStatus_StorageStatus >(storage_status_);
}
inline void CameraStatus::set_storage_status(::mavsdk::rpc::camera::CameraStatus_StorageStatus value) {
  
  storage_status_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.CameraStatus.storage_status)
}

// -------------------------------------------------------------------

// Setting

// string setting_id = 1;
inline void Setting::clear_setting_id() {
  setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::setting_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.setting_id)
  return _internal_setting_id();
}
inline void Setting::set_setting_id(const std::string& value) {
  _internal_set_setting_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Setting.setting_id)
}
inline std::string* Setting::mutable_setting_id() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.setting_id)
  return _internal_mutable_setting_id();
}
inline const std::string& Setting::_internal_setting_id() const {
  return setting_id_.GetNoArena();
}
inline void Setting::_internal_set_setting_id(const std::string& value) {
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Setting::set_setting_id(std::string&& value) {
  
  setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.Setting.setting_id)
}
inline void Setting::set_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.Setting.setting_id)
}
inline void Setting::set_setting_id(const char* value, size_t size) {
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.Setting.setting_id)
}
inline std::string* Setting::_internal_mutable_setting_id() {
  
  return setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_setting_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.setting_id)
  
  return setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_setting_id(std::string* setting_id) {
  if (setting_id != nullptr) {
    
  } else {
    
  }
  setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting_id);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.setting_id)
}

// string setting_description = 2;
inline void Setting::clear_setting_description() {
  setting_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::setting_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.setting_description)
  return _internal_setting_description();
}
inline void Setting::set_setting_description(const std::string& value) {
  _internal_set_setting_description(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Setting.setting_description)
}
inline std::string* Setting::mutable_setting_description() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.setting_description)
  return _internal_mutable_setting_description();
}
inline const std::string& Setting::_internal_setting_description() const {
  return setting_description_.GetNoArena();
}
inline void Setting::_internal_set_setting_description(const std::string& value) {
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Setting::set_setting_description(std::string&& value) {
  
  setting_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.Setting.setting_description)
}
inline void Setting::set_setting_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.Setting.setting_description)
}
inline void Setting::set_setting_description(const char* value, size_t size) {
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.Setting.setting_description)
}
inline std::string* Setting::_internal_mutable_setting_description() {
  
  return setting_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_setting_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.setting_description)
  
  return setting_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_setting_description(std::string* setting_description) {
  if (setting_description != nullptr) {
    
  } else {
    
  }
  setting_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting_description);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.setting_description)
}

// .mavsdk.rpc.camera.Option option = 3;
inline bool Setting::has_option() const {
  return this != internal_default_instance() && option_ != nullptr;
}
inline void Setting::clear_option() {
  if (GetArenaNoVirtual() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
}
inline const ::mavsdk::rpc::camera::Option& Setting::option() const {
  const ::mavsdk::rpc::camera::Option* p = option_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Setting.option)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::camera::Option*>(
      &::mavsdk::rpc::camera::_Option_default_instance_);
}
inline ::mavsdk::rpc::camera::Option* Setting::release_option() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Setting.option)
  
  ::mavsdk::rpc::camera::Option* temp = option_;
  option_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera::Option* Setting::mutable_option() {
  
  if (option_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera::Option>(GetArenaNoVirtual());
    option_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Setting.option)
  return option_;
}
inline void Setting::set_allocated_option(::mavsdk::rpc::camera::Option* option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete option_;
  }
  if (option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, option, submessage_arena);
    }
    
  } else {
    
  }
  option_ = option;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Setting.option)
}

// -------------------------------------------------------------------

// Option

// string option_id = 1;
inline void Option::clear_option_id() {
  option_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Option::option_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Option.option_id)
  return _internal_option_id();
}
inline void Option::set_option_id(const std::string& value) {
  _internal_set_option_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Option.option_id)
}
inline std::string* Option::mutable_option_id() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Option.option_id)
  return _internal_mutable_option_id();
}
inline const std::string& Option::_internal_option_id() const {
  return option_id_.GetNoArena();
}
inline void Option::_internal_set_option_id(const std::string& value) {
  
  option_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Option::set_option_id(std::string&& value) {
  
  option_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.Option.option_id)
}
inline void Option::set_option_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  option_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.Option.option_id)
}
inline void Option::set_option_id(const char* value, size_t size) {
  
  option_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.Option.option_id)
}
inline std::string* Option::_internal_mutable_option_id() {
  
  return option_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Option::release_option_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Option.option_id)
  
  return option_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_option_id(std::string* option_id) {
  if (option_id != nullptr) {
    
  } else {
    
  }
  option_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option_id);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Option.option_id)
}

// string option_description = 2;
inline void Option::clear_option_description() {
  option_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Option::option_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.Option.option_description)
  return _internal_option_description();
}
inline void Option::set_option_description(const std::string& value) {
  _internal_set_option_description(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.Option.option_description)
}
inline std::string* Option::mutable_option_description() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.Option.option_description)
  return _internal_mutable_option_description();
}
inline const std::string& Option::_internal_option_description() const {
  return option_description_.GetNoArena();
}
inline void Option::_internal_set_option_description(const std::string& value) {
  
  option_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Option::set_option_description(std::string&& value) {
  
  option_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.Option.option_description)
}
inline void Option::set_option_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  option_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.Option.option_description)
}
inline void Option::set_option_description(const char* value, size_t size) {
  
  option_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.Option.option_description)
}
inline std::string* Option::_internal_mutable_option_description() {
  
  return option_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Option::release_option_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.Option.option_description)
  
  return option_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Option::set_allocated_option_description(std::string* option_description) {
  if (option_description != nullptr) {
    
  } else {
    
  }
  option_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option_description);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.Option.option_description)
}

// -------------------------------------------------------------------

// SettingOptions

// string setting_id = 1;
inline void SettingOptions::clear_setting_id() {
  setting_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SettingOptions::setting_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.setting_id)
  return _internal_setting_id();
}
inline void SettingOptions::set_setting_id(const std::string& value) {
  _internal_set_setting_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.setting_id)
}
inline std::string* SettingOptions::mutable_setting_id() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.setting_id)
  return _internal_mutable_setting_id();
}
inline const std::string& SettingOptions::_internal_setting_id() const {
  return setting_id_.GetNoArena();
}
inline void SettingOptions::_internal_set_setting_id(const std::string& value) {
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SettingOptions::set_setting_id(std::string&& value) {
  
  setting_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.SettingOptions.setting_id)
}
inline void SettingOptions::set_setting_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.SettingOptions.setting_id)
}
inline void SettingOptions::set_setting_id(const char* value, size_t size) {
  
  setting_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.SettingOptions.setting_id)
}
inline std::string* SettingOptions::_internal_mutable_setting_id() {
  
  return setting_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingOptions::release_setting_id() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SettingOptions.setting_id)
  
  return setting_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingOptions::set_allocated_setting_id(std::string* setting_id) {
  if (setting_id != nullptr) {
    
  } else {
    
  }
  setting_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting_id);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SettingOptions.setting_id)
}

// string setting_description = 2;
inline void SettingOptions::clear_setting_description() {
  setting_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SettingOptions::setting_description() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.setting_description)
  return _internal_setting_description();
}
inline void SettingOptions::set_setting_description(const std::string& value) {
  _internal_set_setting_description(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera.SettingOptions.setting_description)
}
inline std::string* SettingOptions::mutable_setting_description() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.setting_description)
  return _internal_mutable_setting_description();
}
inline const std::string& SettingOptions::_internal_setting_description() const {
  return setting_description_.GetNoArena();
}
inline void SettingOptions::_internal_set_setting_description(const std::string& value) {
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SettingOptions::set_setting_description(std::string&& value) {
  
  setting_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.camera.SettingOptions.setting_description)
}
inline void SettingOptions::set_setting_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.camera.SettingOptions.setting_description)
}
inline void SettingOptions::set_setting_description(const char* value, size_t size) {
  
  setting_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.camera.SettingOptions.setting_description)
}
inline std::string* SettingOptions::_internal_mutable_setting_description() {
  
  return setting_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingOptions::release_setting_description() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera.SettingOptions.setting_description)
  
  return setting_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingOptions::set_allocated_setting_description(std::string* setting_description) {
  if (setting_description != nullptr) {
    
  } else {
    
  }
  setting_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting_description);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera.SettingOptions.setting_description)
}

// repeated .mavsdk.rpc.camera.Option options = 3;
inline int SettingOptions::options_size() const {
  return options_.size();
}
inline void SettingOptions::clear_options() {
  options_.Clear();
}
inline ::mavsdk::rpc::camera::Option* SettingOptions::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera.SettingOptions.options)
  return options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >*
SettingOptions::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.camera.SettingOptions.options)
  return &options_;
}
inline const ::mavsdk::rpc::camera::Option& SettingOptions::options(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera.SettingOptions.options)
  return options_.Get(index);
}
inline ::mavsdk::rpc::camera::Option* SettingOptions::add_options() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.camera.SettingOptions.options)
  return options_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::camera::Option >&
SettingOptions::options() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.camera.SettingOptions.options)
  return options_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::camera::CameraResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::CameraResult_Result>() {
  return ::mavsdk::rpc::camera::CameraResult_Result_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus>() {
  return ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::CameraStatus_StorageStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::CameraStatus_StorageStatus>() {
  return ::mavsdk::rpc::camera::CameraStatus_StorageStatus_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::camera::CameraMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::camera::CameraMode>() {
  return ::mavsdk::rpc::camera::CameraMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_2fcamera_2eproto
