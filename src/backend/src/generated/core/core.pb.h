// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcore_2eproto;
namespace mavsdk {
namespace rpc {
namespace core {
class ConnectionState;
class ConnectionStateDefaultTypeInternal;
extern ConnectionStateDefaultTypeInternal _ConnectionState_default_instance_;
class ConnectionStateResponse;
class ConnectionStateResponseDefaultTypeInternal;
extern ConnectionStateResponseDefaultTypeInternal _ConnectionStateResponse_default_instance_;
class ListRunningPluginsRequest;
class ListRunningPluginsRequestDefaultTypeInternal;
extern ListRunningPluginsRequestDefaultTypeInternal _ListRunningPluginsRequest_default_instance_;
class ListRunningPluginsResponse;
class ListRunningPluginsResponseDefaultTypeInternal;
extern ListRunningPluginsResponseDefaultTypeInternal _ListRunningPluginsResponse_default_instance_;
class PluginInfo;
class PluginInfoDefaultTypeInternal;
extern PluginInfoDefaultTypeInternal _PluginInfo_default_instance_;
class SubscribeConnectionStateRequest;
class SubscribeConnectionStateRequestDefaultTypeInternal;
extern SubscribeConnectionStateRequestDefaultTypeInternal _SubscribeConnectionStateRequest_default_instance_;
}  // namespace core
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::core::ConnectionState* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ConnectionState>(Arena*);
template<> ::mavsdk::rpc::core::ConnectionStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ConnectionStateResponse>(Arena*);
template<> ::mavsdk::rpc::core::ListRunningPluginsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ListRunningPluginsRequest>(Arena*);
template<> ::mavsdk::rpc::core::ListRunningPluginsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::core::ListRunningPluginsResponse>(Arena*);
template<> ::mavsdk::rpc::core::PluginInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::core::PluginInfo>(Arena*);
template<> ::mavsdk::rpc::core::SubscribeConnectionStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::core::SubscribeConnectionStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace core {

// ===================================================================

class SubscribeConnectionStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.SubscribeConnectionStateRequest) */ {
 public:
  SubscribeConnectionStateRequest();
  virtual ~SubscribeConnectionStateRequest();

  SubscribeConnectionStateRequest(const SubscribeConnectionStateRequest& from);
  SubscribeConnectionStateRequest(SubscribeConnectionStateRequest&& from) noexcept
    : SubscribeConnectionStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeConnectionStateRequest& operator=(const SubscribeConnectionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeConnectionStateRequest& operator=(SubscribeConnectionStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeConnectionStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeConnectionStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeConnectionStateRequest*>(
               &_SubscribeConnectionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribeConnectionStateRequest& a, SubscribeConnectionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeConnectionStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeConnectionStateRequest* New() const final {
    return CreateMaybeMessage<SubscribeConnectionStateRequest>(nullptr);
  }

  SubscribeConnectionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeConnectionStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeConnectionStateRequest& from);
  void MergeFrom(const SubscribeConnectionStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeConnectionStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.SubscribeConnectionStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.SubscribeConnectionStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ConnectionStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ConnectionStateResponse) */ {
 public:
  ConnectionStateResponse();
  virtual ~ConnectionStateResponse();

  ConnectionStateResponse(const ConnectionStateResponse& from);
  ConnectionStateResponse(ConnectionStateResponse&& from) noexcept
    : ConnectionStateResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionStateResponse& operator=(const ConnectionStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionStateResponse& operator=(ConnectionStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionStateResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionStateResponse*>(
               &_ConnectionStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionStateResponse& a, ConnectionStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionStateResponse* New() const final {
    return CreateMaybeMessage<ConnectionStateResponse>(nullptr);
  }

  ConnectionStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionStateResponse& from);
  void MergeFrom(const ConnectionStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ConnectionStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionStateFieldNumber = 1,
  };
  // .mavsdk.rpc.core.ConnectionState connection_state = 1;
  bool has_connection_state() const;
  private:
  bool _internal_has_connection_state() const;
  public:
  void clear_connection_state();
  const ::mavsdk::rpc::core::ConnectionState& connection_state() const;
  ::mavsdk::rpc::core::ConnectionState* release_connection_state();
  ::mavsdk::rpc::core::ConnectionState* mutable_connection_state();
  void set_allocated_connection_state(::mavsdk::rpc::core::ConnectionState* connection_state);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ConnectionStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::core::ConnectionState* connection_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ListRunningPluginsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ListRunningPluginsRequest) */ {
 public:
  ListRunningPluginsRequest();
  virtual ~ListRunningPluginsRequest();

  ListRunningPluginsRequest(const ListRunningPluginsRequest& from);
  ListRunningPluginsRequest(ListRunningPluginsRequest&& from) noexcept
    : ListRunningPluginsRequest() {
    *this = ::std::move(from);
  }

  inline ListRunningPluginsRequest& operator=(const ListRunningPluginsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRunningPluginsRequest& operator=(ListRunningPluginsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRunningPluginsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRunningPluginsRequest* internal_default_instance() {
    return reinterpret_cast<const ListRunningPluginsRequest*>(
               &_ListRunningPluginsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRunningPluginsRequest& a, ListRunningPluginsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRunningPluginsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRunningPluginsRequest* New() const final {
    return CreateMaybeMessage<ListRunningPluginsRequest>(nullptr);
  }

  ListRunningPluginsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRunningPluginsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRunningPluginsRequest& from);
  void MergeFrom(const ListRunningPluginsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRunningPluginsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ListRunningPluginsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ListRunningPluginsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ListRunningPluginsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ListRunningPluginsResponse) */ {
 public:
  ListRunningPluginsResponse();
  virtual ~ListRunningPluginsResponse();

  ListRunningPluginsResponse(const ListRunningPluginsResponse& from);
  ListRunningPluginsResponse(ListRunningPluginsResponse&& from) noexcept
    : ListRunningPluginsResponse() {
    *this = ::std::move(from);
  }

  inline ListRunningPluginsResponse& operator=(const ListRunningPluginsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRunningPluginsResponse& operator=(ListRunningPluginsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRunningPluginsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRunningPluginsResponse* internal_default_instance() {
    return reinterpret_cast<const ListRunningPluginsResponse*>(
               &_ListRunningPluginsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListRunningPluginsResponse& a, ListRunningPluginsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRunningPluginsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRunningPluginsResponse* New() const final {
    return CreateMaybeMessage<ListRunningPluginsResponse>(nullptr);
  }

  ListRunningPluginsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRunningPluginsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRunningPluginsResponse& from);
  void MergeFrom(const ListRunningPluginsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRunningPluginsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ListRunningPluginsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginInfoFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
  int plugin_info_size() const;
  void clear_plugin_info();
  ::mavsdk::rpc::core::PluginInfo* mutable_plugin_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::core::PluginInfo >*
      mutable_plugin_info();
  const ::mavsdk::rpc::core::PluginInfo& plugin_info(int index) const;
  ::mavsdk::rpc::core::PluginInfo* add_plugin_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::core::PluginInfo >&
      plugin_info() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ListRunningPluginsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::core::PluginInfo > plugin_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class ConnectionState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.ConnectionState) */ {
 public:
  ConnectionState();
  virtual ~ConnectionState();

  ConnectionState(const ConnectionState& from);
  ConnectionState(ConnectionState&& from) noexcept
    : ConnectionState() {
    *this = ::std::move(from);
  }

  inline ConnectionState& operator=(const ConnectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionState& operator=(ConnectionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionState* internal_default_instance() {
    return reinterpret_cast<const ConnectionState*>(
               &_ConnectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectionState& a, ConnectionState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionState* New() const final {
    return CreateMaybeMessage<ConnectionState>(nullptr);
  }

  ConnectionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionState& from);
  void MergeFrom(const ConnectionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.ConnectionState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIsConnectedFieldNumber = 2,
  };
  // uint64 uuid = 1;
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool is_connected = 2;
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.ConnectionState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uuid_;
  bool is_connected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// -------------------------------------------------------------------

class PluginInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.core.PluginInfo) */ {
 public:
  PluginInfo();
  virtual ~PluginInfo();

  PluginInfo(const PluginInfo& from);
  PluginInfo(PluginInfo&& from) noexcept
    : PluginInfo() {
    *this = ::std::move(from);
  }

  inline PluginInfo& operator=(const PluginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginInfo& operator=(PluginInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginInfo* internal_default_instance() {
    return reinterpret_cast<const PluginInfo*>(
               &_PluginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PluginInfo& a, PluginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginInfo* New() const final {
    return CreateMaybeMessage<PluginInfo>(nullptr);
  }

  PluginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginInfo& from);
  void MergeFrom(const PluginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.core.PluginInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcore_2eproto);
    return ::descriptor_table_core_2fcore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.core.PluginInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeConnectionStateRequest

// -------------------------------------------------------------------

// ConnectionStateResponse

// .mavsdk.rpc.core.ConnectionState connection_state = 1;
inline bool ConnectionStateResponse::has_connection_state() const {
  return this != internal_default_instance() && connection_state_ != nullptr;
}
inline void ConnectionStateResponse::clear_connection_state() {
  if (GetArenaNoVirtual() == nullptr && connection_state_ != nullptr) {
    delete connection_state_;
  }
  connection_state_ = nullptr;
}
inline const ::mavsdk::rpc::core::ConnectionState& ConnectionStateResponse::connection_state() const {
  const ::mavsdk::rpc::core::ConnectionState* p = connection_state_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::core::ConnectionState*>(
      &::mavsdk::rpc::core::_ConnectionState_default_instance_);
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::release_connection_state() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  
  ::mavsdk::rpc::core::ConnectionState* temp = connection_state_;
  connection_state_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::core::ConnectionState* ConnectionStateResponse::mutable_connection_state() {
  
  if (connection_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::core::ConnectionState>(GetArenaNoVirtual());
    connection_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
  return connection_state_;
}
inline void ConnectionStateResponse::set_allocated_connection_state(::mavsdk::rpc::core::ConnectionState* connection_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connection_state_;
  }
  if (connection_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connection_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_state, submessage_arena);
    }
    
  } else {
    
  }
  connection_state_ = connection_state;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.core.ConnectionStateResponse.connection_state)
}

// -------------------------------------------------------------------

// ListRunningPluginsRequest

// -------------------------------------------------------------------

// ListRunningPluginsResponse

// repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
inline int ListRunningPluginsResponse::plugin_info_size() const {
  return plugin_info_.size();
}
inline void ListRunningPluginsResponse::clear_plugin_info() {
  plugin_info_.Clear();
}
inline ::mavsdk::rpc::core::PluginInfo* ListRunningPluginsResponse::mutable_plugin_info(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.core.ListRunningPluginsResponse.plugin_info)
  return plugin_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::core::PluginInfo >*
ListRunningPluginsResponse::mutable_plugin_info() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.core.ListRunningPluginsResponse.plugin_info)
  return &plugin_info_;
}
inline const ::mavsdk::rpc::core::PluginInfo& ListRunningPluginsResponse::plugin_info(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ListRunningPluginsResponse.plugin_info)
  return plugin_info_.Get(index);
}
inline ::mavsdk::rpc::core::PluginInfo* ListRunningPluginsResponse::add_plugin_info() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.core.ListRunningPluginsResponse.plugin_info)
  return plugin_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::core::PluginInfo >&
ListRunningPluginsResponse::plugin_info() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.core.ListRunningPluginsResponse.plugin_info)
  return plugin_info_;
}

// -------------------------------------------------------------------

// ConnectionState

// uint64 uuid = 1;
inline void ConnectionState::clear_uuid() {
  uuid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectionState::uuid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ConnectionState.uuid)
  return uuid_;
}
inline void ConnectionState::set_uuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uuid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.ConnectionState.uuid)
}

// bool is_connected = 2;
inline void ConnectionState::clear_is_connected() {
  is_connected_ = false;
}
inline bool ConnectionState::is_connected() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.ConnectionState.is_connected)
  return is_connected_;
}
inline void ConnectionState::set_is_connected(bool value) {
  
  is_connected_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.ConnectionState.is_connected)
}

// -------------------------------------------------------------------

// PluginInfo

// string name = 1;
inline void PluginInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PluginInfo::name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.PluginInfo.name)
  return _internal_name();
}
inline void PluginInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.PluginInfo.name)
}
inline std::string* PluginInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.core.PluginInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PluginInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void PluginInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PluginInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.core.PluginInfo.name)
}
inline void PluginInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.core.PluginInfo.name)
}
inline void PluginInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.core.PluginInfo.name)
}
inline std::string* PluginInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PluginInfo::release_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.core.PluginInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PluginInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.core.PluginInfo.name)
}

// string address = 2;
inline void PluginInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PluginInfo::address() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.PluginInfo.address)
  return _internal_address();
}
inline void PluginInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.PluginInfo.address)
}
inline std::string* PluginInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.core.PluginInfo.address)
  return _internal_mutable_address();
}
inline const std::string& PluginInfo::_internal_address() const {
  return address_.GetNoArena();
}
inline void PluginInfo::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PluginInfo::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.core.PluginInfo.address)
}
inline void PluginInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.core.PluginInfo.address)
}
inline void PluginInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.core.PluginInfo.address)
}
inline std::string* PluginInfo::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PluginInfo::release_address() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.core.PluginInfo.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PluginInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.core.PluginInfo.address)
}

// int32 port = 3;
inline void PluginInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PluginInfo::port() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.core.PluginInfo.port)
  return port_;
}
inline void PluginInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.core.PluginInfo.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace rpc
}  // namespace mavsdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcore_2eproto
